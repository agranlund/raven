
                                        hscroll.s            Page 1     MADMAC Atari Macro Assembler 0.11j (Atari ST)


    1                                   ;
    2                                   ;	HSCROLL.S   Horizontal Scrolling Demo
    3                                   ;	THE ONE LINE VERSION
    4                                   ;
    5                                   ;	Copyright 1988 ATARI CORP.
    6                                   ;	Started 9/12/88 .. Rob Zdybel
    7                                   ;
    8                                   
    9                                   	.text
   10                                   	.include atari
  565                                   	.list
   11                                   
   12                                   ;
   13                                   ;	HARDWARE CONSTANTS
   14                                   ;
   15           =FFFF820D               vbaselo	=	$ffff820d		; Video Base Address (lo)
   16           =FFFF820F               linewid	=	$ffff820f		; Width of a scan-line (Words, minus 1)
   17           =FFFF8265               hscroll	=	$ffff8265		; Horizontal scroll count (0 .. 15)
   18                                   
   19                                   ;
   20                                   ;	SYSTEM CONSTANTS
   21                                   ;
   22           =00000070               vblvec	=	$70		; System VBlank Vector
   23           =00000118               ikbdvec	= 	$118		; IKBD/MIDI (6850) Vector
   24           =00000120               hblvec	=	$120		; Horizontal Blank Counter (68901) Vector
   25                                   
   26                                   ;
   27                                   ;	LOCAL CONSTANTS
   28                                   ;
   29                                   
   30                                   ;
   31                                   ;	System Initialization
   32                                   ;
   33                                   start:
   34  00000000  2A4F                   	move.l	a7,a5
   35  00000002  2E7Cxxxxxxxx           	move.l	#mystack,a7	; Get Our Own Local Stack
   36  00000008  2A6D0004               	move.l	4(a5),a5	; a5 = basepage address
   37  0000000C  202D000C               	move.l	TEXTSZ(a5),d0
   38  00000010  D0AD0014               	add.l	DATASZ(a5),d0
   39  00000014  D0AD001C               	add.l	BSSSZ(a5),d0
   40  00000018  D0BC00000100           	add.l	#$100,d0	; RAM req'd = text+bss+data+BasePageLength
   41  0000001E  2800                   	move.l	d0,d4		; d4 = RAM req'd
                                        	Mshrink	a5,d0		; Return Excess Storage
       00000020  2F00                 @ 	move.l	d0,-(sp)
       00000022  2F0D                 @ 	move.l	a5,-(sp)
       00000024  4267                 @ 	clr.w	-(sp)
                                      @ 	Gemdos $4a,12
       00000026  3F3C004A             @ 	move.w	#$4a,-(sp)
       0000002A  4E41                 @ 	trap	#1
                                      @ 	.if $c <= 8
                                      - 	addq	#$c,sp
                                      - 	.else
       0000002C  DEFC000C             @ 	add.w	#$c,sp
   42                                 @ 	.endif
   43                                   ;
   44                                   ;	Other Initialization
   45                                   ;
                                        	Super			; enter supervisor mode
       00000030  42A7                 @ 	clr.l	-(sp)
       00000032  3F3C0020             @ 	move.w	#$20,-(sp)
       00000036  4E41                 @ 	trap	#1
       00000038  5C4F                 @ 	addq	#6,sp
   46  0000003A  2F00                 @ 	move.l	d0,-(sp)	; WARNING - Old SSP saved on stack.
   47                                   
                                        	Fgetdta
                                      @ 	Gemdos $2f,2
       0000003C  3F3C002F             @ 	move.w	#$2f,-(sp)
       00000040  4E41                 @ 	trap	#1
                                      @ 	.if $2 <= 8
       00000042  544F                 @ 	addq	#$2,sp
                                      @ 	.else
                                      - 	add.w	#$2,sp
   48                                 - 	.endif
   49  00000044  2840                   	move.l	d0,a4
   50  00000046  D8FC001E               	adda	#30,a4		; a4 = Filename ptr
                                        	Fsfirst	#neofile,#0
       0000004A  3F3C0000             @ 	move.w	#$0,-(sp)
       0000004E  2F3Cxxxxxxxx         @ 	move.l	#neofile,-(sp)
                                      @ 	Gemdos $4e,8
       00000054  3F3C004E             @ 	move.w	#$4e,-(sp)
       00000058  4E41                 @ 	trap	#1
                                      @ 	.if $8 <= 8
       0000005A  504F                 @ 	addq	#$8,sp
                                      @ 	.else
                                      - 	add.w	#$8,sp
   51                                 - 	.endif
   52  0000005C  4A40                   	tst	d0
   53  0000005E  6B00xxxx               	bmi	abort		; IF (No NEO files) ABORT
                                        	Fopen	a4,#0
       00000062  3F3C0000             @ 	move.w	#$0,-(sp)
       00000066  2F0C                 @ 	move.l	a4,-(sp)


                                        hscroll.s            Page 2     MADMAC Atari Macro Assembler 0.11j (Atari ST)


                                      @ 	Gemdos $3d,8
       00000068  3F3C003D             @ 	move.w	#$3d,-(sp)
       0000006C  4E41                 @ 	trap	#1
                                      @ 	.if $8 <= 8
       0000006E  504F                 @ 	addq	#$8,sp
                                      @ 	.else
                                      - 	add.w	#$8,sp
   54                                 - 	.endif
   55  00000070  4A40                   	tst	d0
   56  00000072  6B00xxxx               	bmi	abort		; IF (Error opening file) ABORT
   57                                   
   58  00000076  33C0xxxxxxxx           	move	d0,handle
                                        	Fread	d0,#32128,#neobuff
       0000007C  2F3Cxxxxxxxx         @ 	move.l	#neobuff,-(sp)
       00000082  2F3C00007D80         @ 	move.l	#$7d80,-(sp)
       00000088  3F00                 @ 	move.w	d0,-(sp)
                                      @ 	Gemdos $3f,12
       0000008A  3F3C003F             @ 	move.w	#$3f,-(sp)
       0000008E  4E41                 @ 	trap	#1
                                      @ 	.if $c <= 8
                                      - 	addq	#$c,sp
                                      - 	.else
       00000090  DEFC000C             @ 	add.w	#$c,sp
   59                                 @ 	.endif
   60  00000094  4A80                   	tst.l	d0
   61  00000096  6B00xxxx               	bmi	abort		; IF (File Read Error) ABORT
                                        	Fclose	handle
       0000009A  3F39xxxxxxxx         @ 	move.w	handle,-(sp)
                                      @ 	Gemdos $3e,4
       000000A0  3F3C003E             @ 	move.w	#$3e,-(sp)
       000000A4  4E41                 @ 	trap	#1
                                      @ 	.if $4 <= 8
       000000A6  584F                 @ 	addq	#$4,sp
                                      @ 	.else
                                      - 	add.w	#$4,sp
   62                                 - 	.endif
   63  000000A8  4A40                   	tst	d0
   64  000000AA  6B00xxxx               	bmi	abort		; IF (Error Closing a file) ABORT
   65                                   
   66  000000AE  45F9xxxxxxxx           	lea	neobuff+4,a2
   67  000000B4  41F88240               	lea	palette,a0
   68  000000B8  43F9xxxxxxxx           	lea	oldpal,a1
   69  000000BE  303C000F               	move	#15,d0
   70  000000C2  32D0                   .ploop:	move.w	(a0),(a1)+	; save old color palette
   71  000000C4  30DA                   	move.w	(a2)+,(a0)+	; create new color palette
   72  000000C6  51C8FFFA               	dbra	d0,.ploop
   73                                   
   74  000000CA  303C00A0               	move	#160,d0		; Double each display line
   75  000000CE  41F9xxxxxxxx           	lea	bigbuff,a0
   76  000000D4  43F9xxxxxxxx           	lea	neobuff+128,a1
   77  000000DA  343C00C7               	move	#199,d2
   78  000000DE  323C0027               .linlp:	move	#39,d1		; FOR (200 Lines) DO
   79  000000E2  21910000               .dublp:	move.l	(a1),(a0,d0)	; duplicate line
   80  000000E6  20D9                   	move.l	(a1)+,(a0)+
   81  000000E8  51C9FFF8               	dbra	d1,.dublp
   82  000000EC  D0C0                   	adda	d0,a0
   83  000000EE  51CAFFEE               	dbra	d2,.linlp
   84                                   
   85  000000F2  41F9xxxxxxxx           	lea	baseaddr,a0
   86  000000F8  43F9xxxxxxxx           	lea	xoffset,a1
   87  000000FE  45F9xxxxxxxx           	lea	bigbuff,a2
   88  00000104  303C0009               	move	#9,d0
   89  00000108  32FC0000               .strlp:	move	#0,(a1)+	; FOR (10 Strips) DO Init base and offset
   90  0000010C  20CA                   	move.l	a2,(a0)+
   91  0000010E  D4FC1900               	adda	#320*20,a2
   92  00000112  51C8FFF4               	dbra	d0,.strlp
   93                                   
   94  00000116  23F80118xxxxxxxx       	move.l	ikbdvec,oldikbd
   95  0000011E  21FCxxxxxxxx0000       	move.l	#ikbd,ikbdvec	; IPL 5 hack for IKBD/MIDI
   96                                   
   97  00000126  23F80070xxxxxxxx       	move.l	vblvec,oldvbl
   98  0000012E  21FCxxxxxxxx0000       	move.l	#vbl,vblvec	; Capture System VBlank Interrupt
   99                                   
  100  00000136  21FCxxxxxxxx0000       	move.l	#hbl,hblvec	; Capture HBlank Interrupt
  101  0000013E  08B80005FA15           	bclr.b	#5,imrb
  102  00000144  08B80005FA09           	bclr.b	#5,ierb
  103  0000014A  08F80000FA13           	bset.b	#0,imra
  104  00000150  08F80000FA07           	bset.b	#0,iera		; Enable Hblank
  105                                   
  106                                   ;
  107                                   ;	Scrolling Demo loop
  108                                   ;
  109                                   wavelp:
  110                                   ;	Bconstat CON		; Keyboard Polling
  111                                   ;	tst	d0
  112                                   ;	beq	noexit		; IF (Keyboard Input Available) THEN
  113                                   ;	Bconin	CON
  114                                   ;	cmp.b	#'C'-64,d0
  115                                   ;	beq	exit		; CTRL-C ==> EXIT
  116                                   noexit:
  117  00000156  60FE                   	bra	wavelp


                                        hscroll.s            Page 3     MADMAC Atari Macro Assembler 0.11j (Atari ST)


  118                                   exit:
  119                                   ;
  120                                   ;	System Tear-Down
  121                                   ;
  122  00000158  08B80000FA07           	bclr.b	#0,iera
  123  0000015E  08B80000FA13           	bclr.b	#0,imra		; Disable Hblank
  124  00000164  21F9xxxxxxxx0000       	move.l	oldikbd,ikbdvec ; Restore System IKBD/MIDI Interrupt
  125  0000016C  21F9xxxxxxxx0000       	move.l	oldvbl,vblvec	; Restore System VBlank Interrupt
  126                                   
  127  00000174  11FC0000820F           	move.b	#0,linewid
  128  0000017A  11FC00008265           	move.b	#0,hscroll	; Restore Normal Display
  129                                   
                                        	Gettime
                                      @ 	Xbios	$17,2
       00000180  3F3C0017             @ 	move.w	#$17,-(sp)
       00000184  4E4E                 @ 	trap	#14
                                      @ 	.if $2 <= 8
       00000186  544F                 @ 	addq	#$2,sp
                                      @ 	.else
                                      - 	add.w	#$2,sp
  130                                 - 	.endif
  131  00000188  23C0xxxxxxxx           	move.l	d0,vbltemp	; Get IKBD Date/Time
                                        	Tsettime d0
       0000018E  3F00                 @ 	move	d0,-(sp)
                                      @ 	Gemdos	$2d,4
       00000190  3F3C002D             @ 	move.w	#$2d,-(sp)
       00000194  4E41                 @ 	trap	#1
                                      @ 	.if $4 <= 8
       00000196  584F                 @ 	addq	#$4,sp
                                      @ 	.else
                                      - 	add.w	#$4,sp
  132                                 - 	.endif
                                        	Tsetdate vbltemp	; Set GEMDOS Time and Date
       00000198  3F39xxxxxxxx         @ 	move	vbltemp,-(sp)
                                      @ 	Gemdos	$2b,4
       0000019E  3F3C002B             @ 	move.w	#$2b,-(sp)
       000001A2  4E41                 @ 	trap	#1
                                      @ 	.if $4 <= 8
       000001A4  584F                 @ 	addq	#$4,sp
                                      @ 	.else
                                      - 	add.w	#$4,sp
  133                                 - 	.endif
  134                                   
  135  000001A6  41F9xxxxxxxx           	lea	oldpal,a0
  136  000001AC  43F88240               	lea	palette,a1
  137  000001B0  303C000F               	move	#15,d0
  138  000001B4  32D8                   .unplp:	move.w	(a0)+,(a1)+
  139  000001B6  51C8FFFC               	dbra	d0,.unplp	; restore old color palette
  140                                   
                                        abort:	User			; return to user mode
                                      @ 	Gemdos	$20,6
       000001BA  3F3C0020             @ 	move.w	#$20,-(sp)
       000001BE  4E41                 @ 	trap	#1
                                      @ 	.if $6 <= 8
       000001C0  5C4F                 @ 	addq	#$6,sp
                                      @ 	.else
                                      - 	add.w	#$6,sp
  141                                 - 	.endif
                                        	Pterm0			; return to GEMDOS
       000001C2  4267                 @ 	clr.w	-(sp)
       000001C4  4E41                 @ 	trap	#1
  142  000001C6  4AFC                 @ 	illegal
  143                                   
  144                                   ;
  145                                   ;	VBL	Vertical-Blank Interrupt Server
  146                                   ;
  147                                   vbl:
  148  000001C8  48E7E0E0               	movem.l	d0-d2/a0-a2,-(sp)
  149                                   
  150  000001CC  41F9xxxxxxxx           	lea	video,a0	; a0 = Display list (scroll,base)
  151  000001D2  43F9xxxxxxxx           	lea	xoffset,a1	; a1 = Xoffset list
  152  000001D8  45F9xxxxxxxx           	lea	baseaddr,a2	; a2 = Base address list
  153  000001DE  323C0009               	move	#9,d1
  154                                   .reglp:				; FOR (10 scrolling regions) DO
  155  000001E2  3011                   	move	(a1),d0		; d0 = current Xoffset
  156  000001E4  24380462               	move.l	_vbclock,d2
  157  000001E8  C47C0001               	and	#1,d2		; Scrolling speed control
  158  000001EC  6600xxxx               	bne	.join
  159                                   
  160  000001F0  08010000               	btst.l	#0,d1
  161  000001F4  6600xxxx               	bne	.odd
  162  000001F8  5240                   	addq	#1,d0		; EVEN --> Increment
  163  000001FA  B07C0140               	cmp	#320,d0
  164  000001FE  6D00xxxx               	blt	.join
  165  00000202  7000                   	moveq	#0,d0		; Wrap-up
  166  00000204  6000xxxx               	bra	.join
  167  00000208  5340                   .odd:	subq	#1,d0		; ODD --> Decrement
  168  0000020A  6C00xxxx               	bge	.join
  169  0000020E  303C013F               	move	#319,d0		; Wrap-down
  170  00000212  3280                   .join:	move	d0,(a1)		; New Xoffset
  171  00000214  E240                   	asr	#1,d0


                                        hscroll.s            Page 4     MADMAC Atari Macro Assembler 0.11j (Atari ST)


  172  00000216  C0BC0000FFF8           	and.l	#$0fff8,d0	; d0 = byte offset within line
  173  0000021C  D09A                   	add.l	(a2)+,d0	; d0 = Regions video base
  174  0000021E  2080                   	move.l	d0,(a0)
  175  00000220  3019                   	move	(a1)+,d0
  176  00000222  C07C000F               	and	#$0f,d0		; d0 = Regions horizontal scroll count
  177  00000226  1080                   	move.b	d0,(a0)
  178  00000228  5888                   	addq.l	#4,a0
  179  0000022A  51C9FFB6               	dbra	d1,.reglp
  180                                   .skip:
  181                                   
  182  0000022E  41F9xxxxxxxx           	lea	video,a0
  183  00000234  1018                   	move.b	(a0)+,d0
  184  00000236  11C08265               	move.b	d0,hscroll
  185  0000023A  11D88205               	move.b	(a0)+,vcounthi
  186  0000023E  11D88207               	move.b	(a0)+,vcountmid
  187  00000242  11D88209               	move.b	(a0)+,vcountlo	; Initialize first region
  188                                   
  189  00000246  323C0050               	move	#80,d1		; Double normal ST line width
  190  0000024A  4A00                   	tst.b	d0
  191  0000024C  6700xxxx               	beq	.zero		; IF (non-zero scroll count) Reduce line width
  192  00000250  5941                   	subq	#4,d1
  193  00000252  11C1820F               .zero:	move.b	d1,linewid
  194                                   
  195  00000256  2018                   	move.l	(a0)+,d0
  196  00000258  E198                   	rol.l	#8,d0
  197  0000025A  23C0xxxxxxxx           	move.l	d0,videodata	; Init next lines data
  198  00000260  23C8xxxxxxxx           	move.l	a0,videoptr	; Init display list ptr
  199                                   
  200  00000266  11FC0000FA1B           	move.b	#0,tbcr
  201  0000026C  11FC0014FA21           	move.b	#20,tbdr	; Interrupt every twenty HBlanks
  202  00000272  11FC0008FA1B           	move.b	#8,tbcr
  203                                   
  204  00000278  4CDF0707               	movem.l	(sp)+,d0-d2/a0-a2
  205  0000027C  4EF9                   	.dc.w	$4ef9
  206  0000027E  00000000               oldvbl:	.dc.l	0		; JMP (Old-Vblank)
  207  00000282  4AFC                   	illegal
  208                                   
  209                                   ;
  210                                   ;	IKBD	IKBD/MIDI Interrupt Server
  211                                   ;
  212                                   ikbd:
  213  00000284  3F00                   	move	d0,-(sp)
  214                                   
  215  00000286  40C0                   	move	sr,d0
  216  00000288  C07CF8FF               	and	#$f8ff,d0
  217  0000028C  807C0500               	or	#$500,d0
  218  00000290  46C0                   	move	d0,sr		; Set IPL down to 5
  219                                   
  220  00000292  301F                   	move	(sp)+,d0
  221  00000294  4EF9                   	.dc.w	$4ef9
  222                                   oldikbd:
  223  00000296  00000000               	.dc.l	0		; JMP (Old-IKBD)
  224  0000029A  4AFC                   	illegal
  225                                   
  226                                   ;
  227                                   ;	HBL	*ONE LINE* Horizontal-Blank Interrupt Server
  228                                   ;
  229                                   hbl:
  230  0000029C  48E78080               	movem.l	d0/a0,-(sp)	; 			(44+28=72)
  231                                   
  232  000002A0  2039xxxxxxxx           	move.l	videodata,d0	; d0 = vcount/scroll	(20)
  233  000002A6  41F88205               	lea	vcounthi,a0	; a0 = movep base	(8)
  234  000002AA  11C08265               	move.b	d0,hscroll	; set HScroll		(12)
  235  000002AE  01C80000               	movep.l	d0,(a0)		; set VideoBase		(24)
  236                                   				;			(total = 136+ cycles)
  237  000002B2  4A00                   	tst.b	d0
  238  000002B4  6700xxxx               	beq	.zero		; IF (non-zero scroll count) Reduce line width
  239  000002B8  11FC004C820F           	move.b	#76,linewid
  240  000002BE  6000xxxx               	bra	.join
  241  000002C2  11FC0050820F           .zero:	move.b	#80,linewid
  242                                   .join:
  243  000002C8  2079xxxxxxxx           	move.l	videoptr,a0
  244  000002CE  2018                   	move.l	(a0)+,d0
  245  000002D0  E198                   	rol.l	#8,d0
  246  000002D2  23C0xxxxxxxx           	move.l	d0,videodata	; Init next regions data
  247  000002D8  23C8xxxxxxxx           	move.l	a0,videoptr
  248                                   
  249  000002DE  4CDF0101               	movem.l	(sp)+,d0/a0
  250  000002E2  08B80000FA0F           	bclr.b	#0,isra		; Clear In-Service bit
  251  000002E8  4E73                   	rte
  252                                   
  253                                   ;
  254                                   ;	DATA STORAGE
  255                                   ;
  256  000002EA                         	.data
  257                                   neofile:			; NEO filename search string
  258  00000000  2A2E6E656F00           	.dc.b	"*.neo",0
  259                                   
  260                                   	.even
  261                                   
  262                                   ;


                                        hscroll.s            Page 5     MADMAC Atari Macro Assembler 0.11j (Atari ST)


  263                                   ;	RANDOM DATA STORAGE
  264                                   ;
  265  00000006                         	.bss
  266                                   
  267                                   oldpal:
  268  00000000 =00000010               	.ds.l	16		; Original color palette
  269                                   handle:				; Active Handle
  270  00000040 =00000001               	.ds.w	1
  271                                   
  272                                   baseaddr:			; Image Base address for each strip
  273  00000042 =0000000A               	.ds.l	10
  274                                   xoffset:			; Pixel-offset for each strip
  275  0000006A =0000000A               	.ds.w	10
  276                                   video:				; HScroll and Video Base address for each strip
  277  0000007E =0000000A               	.ds.l	10
  278                                   videoptr:			; Display list ptr
  279  000000A6 =00000001               	.ds.l	1
  280                                   videodata:			; Next regions display info
  281  000000AA =00000001               	.ds.l	1
  282                                   
  283                                   neobuff:			; NEO-Image Buffer 
  284  000000AE =00007D80               	.ds.b	32128
  285                                   bigbuff:			; Mega-Image Buffer 
  286  00007E2E =0000FA00               	.ds.b	2*32000
  287                                   
  288                                   vbltemp:			; Vblank Temporary Storage
  289  0001782E =00000001               	.ds.l	1
  290                                   
  291  00017832 =00000100               	.ds.l	256		; (stack body)
  292                                   mystack:
  293  00017C32 =00000001               	.ds.l	1		; Local Stack Storage
  294                                   
  295                                   	.end


                                                             Page 6     MADMAC Atari Macro Assembler 0.11j (Atari ST)
Symbol Table

            .dublp 000000E2  t              SSIZE 0000000E  a              devno 00000001   #           neofile 00000000  d 
             .join 00000212  t           Setcolor macro                    devno 00000001   #            newsiz 00000001   #
             .join 000002C8  t             Setexc macro                    devno 00000001   #            noexit 00000156  t 
            .linlp 000000DE  t         Setpalette macro                    devno 00000001   #             nvbls 00000454 ea 
              .odd 00000208  t          Setscreen macro                  diskctl FFFF8604 ea             offset 00000000   #
            .ploop 000000C2  t             String macro                 disktype 00000002   #           oldikbd 00000296  t 
            .reglp 000001E2  t              Super macro                    dmahi FFFF8609 ea             oldpal 00000000  b 
             .skip 0000022E  t            Supexec macro                    dmalo FFFF860D ea             oldvbl 0000027E  t 
            .strlp 00000108  t                TAB 00000009 ea             dmamid FFFF860B ea                 op 00000001   #
            .unplp 000001B4  t              TBASE 00000008  a                drv 00000000   #                p1 00000001   #
             .zero 00000252  t             TEXTSZ 0000000C ea                dtr 00000010 ea                 p2 00000002   #
             .zero 000002C2  t               TLEN 0000000C  a             end_os 000004FA ea                 p3 00000003   #
               AUX 00000001 ea              TSIZE 00000002  a         etv_critic 00000404 ea            palette FFFF8240 ea 
             BBASE 00000018  a            Tickcal macro                 etv_term 00000408 ea            palmode 00000448 ea 
              BLEN 0000001C  a           Tsetdate macro                etv_timer 00000400 ea              param 00000001   #
              BPSZ 00000100 ea           Tsettime macro                 etv_xtra 0000040C ea            physloc 00000001   #
             BSIZE 0000000A  a               User macro                  exec_os 000004FE ea            phystop 0000042E ea 
             BSSSZ 0000001C ea               XXX1 00000012  a           execflag 00000003   #           prv_aux 00000512 ea 
            Bconin macro                     XXX2 00000016  a               exit 00000158  t           prv_auxo 0000050E ea 
           Bconout macro                     XXX3 0000001A  a               fifo FFFF8606 ea            prv_lst 0000050A ea 
          Bconstat macro                     XXXX 00000028  a               file 00000000   #          prv_lsto 00000506 ea 
           Bcostat macro                    Xbios macro                     file 00000000   #               ptr 00000000   #
              Bios macro                  _____md 0000049E ea               file 00000000   #               ptr 00000000   #
           CMDLINE 00000080  a          _autopath 000004CA ea              flock 0000043E ea                ptr 00000001   #
               CON 00000002 ea           _bootdev 00000446 ea              fspec 00000000   #             recno 00000003   #
                CR 0000000D ea              _bufl 000004B2 ea               func 00000000   #          resvalid 00000426 ea 
        CURS_BLINK 00000002 ea           _cmdload 00000482 ea             giaamp 00000008 ea          resvector 0000042A ea 
      CURS_GETRATE 00000005 ea           _drvbits 000004C2 ea             gibamp 00000009 ea            retcode 00000001   #
         CURS_HIDE 00000000 ea           _dskbufp 000004C6 ea             gicamp 0000000A ea                rez 00000002   #
      CURS_NOBLINK 00000003 ea           _frclock 00000466 ea           gicrnvlp 0000000C ea            rezmode FFFF8260 ea 
      CURS_SETRATE 00000004 ea           _fverify 00000444 ea          gifienvlp 0000000B ea                rsr FFFFFA2B ea 
         CURS_SHOW 00000001 ea            _hz_200 000004BA ea            gimixer 00000007 ea             rwflag 00000000   #
            Cconws macro                  _membot 00000432 ea            ginoise 00000006 ea        sav_context 000004AE ea 
          Cursconf macro                  _memtop 00000436 ea            giporta 0000000E ea           save_row 000004AC ea 
            DATASZ 00000014 ea            _nflops 000004A6 ea            giportb 0000000F ea             savptr 000004A2 ea 
             DBASE 00000010  a           _prt_cnt 000004EE ea             giread FFFF8800 ea                scr FFFFFA27 ea 
              DLEN 00000014  a            _prtabt 000004F0 ea           giselect FFFF8800 ea           scr_dump 00000502 ea 
             DSIZE 00000006  a           _shell_p 000004F6 ea           gitoneac 00000001 ea           screenpt 0000045E ea 
               DTA 00000020  a           _sysbase 000004F2 ea           gitoneaf 00000000 ea             secreg 00000084 ea 
           Dgetdrv macro                 _timr_ms 00000442 ea           gitonebc 00000003 ea             sectno 00000002   #
            Drvmap macro                _v_bas_ad 0000044E ea           gitonebf 00000002 ea             sectno 00000002   #
           Dsetdrv macro                 _vbclock 00000462 ea           gitonecc 00000005 ea             sectno 00000002   #
             ENVIR 0000002C  a          _vbl_list 000004CE ea           gitonecf 00000004 ea           seekrate 00000440 ea 
           FILE_ID 00000000  a          _vblqueue 00000456 ea            giwrite FFFF8802 ea           serialno 00000001   #
            Fclose macro                    abort 000001BA  t               gpip FFFFFA01 ea             sideno 00000004   #
           Fcreate macro                     addr 00000000   #               gpo 00000040 ea             sideno 00000004   #
           Fdelete macro                     addr 00000000   #            handle 00000040  b             sideno 00000004   #
           Fgetdta macro                      aer FFFFFA03 ea             handle 00000000   #            sideno 00000004   #
           Flopfmt macro                     attr 00000001   #            handle 00000000   #               spt 00000002   #
            Floprd macro                 baseaddr 00000042  b             handle 00000000   #          sshiftmd 0000044C ea 
           Flopver macro                  bigbuff 00007E2E  b             handle 00000001   #             start 00000000  t 
            Flopwr macro                    block 00000000   #               hbl 0000029C  t                str 00000000   #
             Fopen macro                      buf 00000001   #            hblvec 00000120 ea             string 00000000   #
             Fread macro                      buf 00000000   #          hdv_boot 0000047A ea             strobe 00000020 ea 
             Fseek macro                      buf 00000000   #           hdv_bpb 00000472 ea            swv_vec 0000046E ea 
           Fsetdta macro                      buf 00000000   #          hdv_init 0000046A ea           syncmode FFFF820A ea 
           Fsfirst macro                      buf 00000000   #       hdv_mediach 0000047E ea               tacr FFFFFA19 ea 
            Fsnext macro                      buf 00000000   #            hdv_rw 00000476 ea               tadr FFFFFA1F ea 
            Fwrite macro                      buf 00000002   #           howmuch 00000000   #              tbcr FFFFFA1B ea 
            Gemdos macro                      buf 00000002   #           hscroll FFFF8265 ea               tbdr FFFFFA21 ea 
            Getbpb macro                     char 00000001   #              iera FFFFFA07 ea              tcdcr FFFFFA1D ea 
            Getmpb macro                    clean 00000001   #              ierb FFFFFA09 ea               tcdr FFFFFA23 ea 
            Getrez macro                    clean 00000001   #              ikbd 00000284  t               tddr FFFFFA25 ea 
           Gettime macro                    clean 00000001   #           ikbdvec 00000118 ea              themd 0000048E ea 
          HEADSIZE 0000001C ea             cmdreg 00000080 ea               imra FFFFFA13 ea               time 00000000   #
             HITPA 00000004  a               cnt1 00000000   #              imrb FFFFFA15 ea            trackno 00000003   #
              IKBD 00000004 ea               code 00000000   #           interlv 00000005   #           trackno 00000003   #
          Initmous macro                   colnum 00000000   #              ipra FFFFFA0B ea            trackno 00000003   #
          Kbdvbase macro                    color 00000001   #              iprb FFFFFA0D ea            trackno 00000003   #
           Kbshift macro                 colorptr 0000045A ea               isra FFFFFA0F ea             trkreg 00000082 ea 
                LF 0000000A ea           constate 000004A8 ea               isrb FFFFFA11 ea           trp14ret 00000486 ea 
            LOWTPA 00000000  a            conterm 00000484 ea              keybd FFFFFC02 ea              trpno 00000000   #
           Logbase macro                    count 00000002   #            keyctl FFFFFC00 ea              trpno 00000000   #
              MIDI 00000003 ea              count 00000005   #           linewid FFFF820F ea              trpno 00000000   #
             MYDTA 00000020 ea              count 00000005   #               loc 00000001   #               tsr FFFFFA2D ea 
            Malloc macro                    count 00000005   #            logloc 00000000   #              type 00000000   #
           Mediach macro                    count 00000000   #             magic 00000006   #               ucr FFFFFA29 ea 
             Mfree macro                    count 00000001   #          memcntlr 00000424 ea                udr FFFFFA2F ea 
            Midiws macro                    count 00000001   #           memconf FFFF8001 ea            vbasehi FFFF8201 ea 
           Mshrink macro                criticret 0000048A ea            memval2 0000043A ea            vbaselo FFFF820D ea 
            PARENT 00000024  a            datareg 00000086 ea           memvalid 00000420 ea           vbasemid FFFF8203 ea 
               PRT 00000000 ea               date 00000000   #               mfp FFFFFA00 ea                vbl 000001C8  t 
             Pexec macro                      ddr FFFFFA05 ea               midi FFFFFC06 ea             vblsem 00000452 ea 
          Physbase macro               defshiftmd 0000044A ea            midictl FFFFFC04 ea            vbltemp 0001782E  b 
           Protobt macro                      dev 00000000   #              mode 00000000   #            vblvec 00000070 ea 
             Pterm macro                      dev 00000000   #              mode 00000001   #          vcounthi FFFF8205 ea 
            Pterm0 macro                      dev 00000000   #              mode 00000001   #          vcountlo FFFF8209 ea 
          Ptermres macro                      dev 00000004   #              mode 00000002   #         vcountmid FFFF8207 ea 
            RAWCON 00000005 ea                dev 00000000   #              mode 00000000   #               vec 00000001   #
            Random macro                    devno 00000000   #           mystack 00017C32  b                vec 00000002   #
             Rwabs macro                    devno 00000000   #           neobuff 000000AE  b             vecnum 00000000   #


                                                             Page 7     MADMAC Atari Macro Assembler 0.11j (Atari ST)
Symbol Table

             video 0000007E  b 
         videodata 000000AA  b 
          videoptr 000000A6  b 
            virgin 00000007   #
                vr FFFFFA17 ea 
            wavelp 00000156  t 
             where 00000000   #
           xoffset 0000006A  b 
              xrts 00000008 ea 

