
                                        neowall.s            Page 1     MADMAC Atari Macro Assembler 0.11j (Atari ST)


    1                                   ;
    2                                   ;	NEOWALL.S   Horizontal and Vertical Scrolling Demo
    3                                   ;
    4                                   ;	Copyright 1988 ATARI CORP.
    5                                   ;	Started 10/10/88 .. Rob Zdybel
    6                                   ;
    7                                   
    8                                   	.text
    9                                   	.include atari
  565                                   	.list
   10                                   
   11                                   ;
   12                                   ;	HARDWARE CONSTANTS
   13                                   ;
   14           =FFFF820D               vbaselo	=	$ffff820d		; Video Base Address (lo)
   15           =FFFF820F               linewid	=	$ffff820f		; Width of a scan-line (Words, minus 1)
   16           =FFFF8265               hscroll	=	$ffff8265		; Horizontal scroll count (0 .. 15)
   17                                   
   18                                   ;
   19                                   ;	SYSTEM CONSTANTS
   20                                   ;
   21           =00000070               vblvect	=	$70		; System VBlank Vector
   22                                   
   23                                   ;
   24                                   ;	LOCAL CONSTANTS
   25                                   ;
   26                                   
   27                                   ;
   28                                   ;	System Initialization
   29                                   ;
   30                                   start:
   31  00000000  2A4F                   	move.l	a7,a5
   32  00000002  2E7Cxxxxxxxx           	move.l	#mystack,a7	; Get Our Own Local Stack
   33  00000008  2A6D0004               	move.l	4(a5),a5	; a5 = basepage address
   34  0000000C  202D000C               	move.l	TEXTSZ(a5),d0
   35  00000010  D0AD0014               	add.l	DATASZ(a5),d0
   36  00000014  D0AD001C               	add.l	BSSSZ(a5),d0
   37  00000018  D0BC00000100           	add.l	#$100,d0	; RAM req'd = text+bss+data+BasePageLength
   38  0000001E  2800                   	move.l	d0,d4		; d4 = RAM req'd
                                        	Mshrink	a5,d0		; Return Excess Storage
       00000020  2F00                 @ 	move.l	d0,-(sp)
       00000022  2F0D                 @ 	move.l	a5,-(sp)
       00000024  4267                 @ 	clr.w	-(sp)
                                      @ 	Gemdos $4a,12
       00000026  3F3C004A             @ 	move.w	#$4a,-(sp)
       0000002A  4E41                 @ 	trap	#1
                                      @ 	.if $c <= 8
                                      - 	addq	#$c,sp
                                      - 	.else
       0000002C  DEFC000C             @ 	add.w	#$c,sp
   39                                 @ 	.endif
   40                                   ;
   41                                   ;	Other Initialization
   42                                   ;
                                        	Super			; enter supervisor mode
       00000030  42A7                 @ 	clr.l	-(sp)
       00000032  3F3C0020             @ 	move.w	#$20,-(sp)
       00000036  4E41                 @ 	trap	#1
       00000038  5C4F                 @ 	addq	#6,sp
   43  0000003A  2F00                 @ 	move.l	d0,-(sp)	; WARNING - Old SSP saved on stack.
   44                                   
                                        	Fgetdta
                                      @ 	Gemdos $2f,2
       0000003C  3F3C002F             @ 	move.w	#$2f,-(sp)
       00000040  4E41                 @ 	trap	#1
                                      @ 	.if $2 <= 8
       00000042  544F                 @ 	addq	#$2,sp
                                      @ 	.else
                                      - 	add.w	#$2,sp
   45                                 - 	.endif
   46  00000044  2840                   	move.l	d0,a4
   47  00000046  D8FC001E               	adda	#30,a4		; a4 = Filename ptr
   48  0000004A  7800                   	moveq	#0,d4		; d4 = Loop Count
                                        	Fsfirst	#neofiles,#0
       0000004C  3F3C0000             @ 	move.w	#$0,-(sp)
       00000050  2F3Cxxxxxxxx         @ 	move.l	#neofiles,-(sp)
                                      @ 	Gemdos $4e,8
       00000056  3F3C004E             @ 	move.w	#$4e,-(sp)
       0000005A  4E41                 @ 	trap	#1
                                      @ 	.if $8 <= 8
       0000005C  504F                 @ 	addq	#$8,sp
                                      @ 	.else
                                      - 	add.w	#$8,sp
   49                                 - 	.endif
   50                                   .neoloop:			; FOR (Nine NEO Files) DO
   51  0000005E  4A40                   	tst	d0
   52  00000060  6B00xxxx               	bmi	abort		; IF (No more NEO files) ABORT
                                        	Fopen	a4,#0
       00000064  3F3C0000             @ 	move.w	#$0,-(sp)
       00000068  2F0C                 @ 	move.l	a4,-(sp)
                                      @ 	Gemdos $3d,8


                                        neowall.s            Page 2     MADMAC Atari Macro Assembler 0.11j (Atari ST)


       0000006A  3F3C003D             @ 	move.w	#$3d,-(sp)
       0000006E  4E41                 @ 	trap	#1
                                      @ 	.if $8 <= 8
       00000070  504F                 @ 	addq	#$8,sp
                                      @ 	.else
                                      - 	add.w	#$8,sp
   53                                 - 	.endif
   54  00000072  4A40                   	tst	d0
   55  00000074  6B00xxxx               	bmi	abort		; IF (Error opening a file) ABORT
   56  00000078  41F9xxxxxxxx           	lea	handlist,a0
   57  0000007E  31804000               	move	d0,(a0,d4)	; Save the Handle
   58  00000082  5444                   	addq	#2,d4
   59  00000084  B87C0010               	cmp	#16,d4
   60  00000088  6E00xxxx               	bgt	.gotnine
                                        	Fseek	#128,d0,#0	; Skip NEO Header
       0000008C  3F3C0000             @ 	move.w	#$0,-(sp)
       00000090  3F00                 @ 	move.w	d0,-(sp)
       00000092  2F3C00000080         @ 	move.l	#$80,-(sp)
                                      @ 	Gemdos $42,10
       00000098  3F3C0042             @ 	move.w	#$42,-(sp)
       0000009C  4E41                 @ 	trap	#1
                                      @ 	.if $a <= 8
                                      - 	addq	#$a,sp
                                      - 	.else
       0000009E  DEFC000A             @ 	add.w	#$a,sp
   61                                 @ 	.endif
   62  000000A2  4A80                   	tst.l	d0
   63  000000A4  6B00xxxx               	bmi	abort		; IF (File Seek Error) ABORT
                                        	Fsnext
                                      @ 	Gemdos $4f,2
       000000A8  3F3C004F             @ 	move.w	#$4f,-(sp)
       000000AC  4E41                 @ 	trap	#1
                                      @ 	.if $2 <= 8
       000000AE  544F                 @ 	addq	#$2,sp
                                      @ 	.else
                                      - 	add.w	#$2,sp
   64                                 - 	.endif
   65  000000B0  60AC                   	bra	.neoloop
   66                                   .gotnine:
                                        	Fread	d0,#128,#bigbuff
       000000B2  2F3Cxxxxxxxx         @ 	move.l	#bigbuff,-(sp)
       000000B8  2F3C00000080         @ 	move.l	#$80,-(sp)
       000000BE  3F00                 @ 	move.w	d0,-(sp)
                                      @ 	Gemdos $3f,12
       000000C0  3F3C003F             @ 	move.w	#$3f,-(sp)
       000000C4  4E41                 @ 	trap	#1
                                      @ 	.if $c <= 8
                                      - 	addq	#$c,sp
                                      - 	.else
       000000C6  DEFC000C             @ 	add.w	#$c,sp
   67                                 @ 	.endif
   68  000000CA  4A80                   	tst.l	d0
   69  000000CC  6B00xxxx               	bmi	abort		; IF (File Read Error) ABORT
   70  000000D0  45F9xxxxxxxx           	lea	bigbuff+4,a2
   71  000000D6  41F88240               	lea	palette,a0
   72  000000DA  43F9xxxxxxxx           	lea	oldpal,a1
   73  000000E0  303C000F               	move	#15,d0
   74  000000E4  32D0                   .ploop:	move.w	(a0),(a1)+	; save old color palette
   75  000000E6  30DA                   	move.w	(a2)+,(a0)+	; create new color palette
   76  000000E8  51C8FFFA               	dbra	d0,.ploop
   77                                   
   78  000000EC  23FCxxxxxxxxxxxxxxxx   	move.l	#bigbuff,buffptr
   79  000000F6  7E00                   	moveq	#0,d7		; d7 = Row Count
   80  000000F8  49F9xxxxxxxx           .rowlp:	lea	threebuf,a4	; FOR (Three rows) DO
   81  000000FE  4BF9xxxxxxxx           	lea	handlist,a5
   82  00000104  DAC7                   	adda	d7,a5
   83  00000106  3C3C0002               	move	#2,d6		; d5 = Column Count
                                        .redlp:	Fread	(a5)+,#32000,a4	; FOR (3 Files) DO Read into temp buff
       0000010A  2F0C                 @ 	move.l	a4,-(sp)
       0000010C  2F3C00007D00         @ 	move.l	#$7d00,-(sp)
       00000112  3F1D                 @ 	move.w	(a5)+,-(sp)
                                      @ 	Gemdos $3f,12
       00000114  3F3C003F             @ 	move.w	#$3f,-(sp)
       00000118  4E41                 @ 	trap	#1
                                      @ 	.if $c <= 8
                                      - 	addq	#$c,sp
                                      - 	.else
       0000011A  DEFC000C             @ 	add.w	#$c,sp
   84                                 @ 	.endif
   85  0000011E  4A80                   	tst.l	d0
   86  00000120  6B00xxxx               	bmi	abort		; IF (File Read Error) ABORT
   87  00000124  D8FC7D00               	adda	#32000,a4
   88  00000128  51CEFFE0               	dbra	d6,.redlp
   89                                   
   90  0000012C  43F9xxxxxxxx           	lea	threebuf,a1
   91  00000132  45F9xxxxxxxx           	lea	threebuf+32000,a2
   92  00000138  47F9xxxxxxxx           	lea	threebuf+64000,a3
   93  0000013E  2079xxxxxxxx           	move.l	buffptr,a0
   94  00000144  3C3C00C7               	move	#199,d6		; d6 = Scan Line Count
   95  00000148  3A3C0027               .linlp:	move	#39,d5		; FOR (200 Lines) DO
   96  0000014C  20D9                   .t1:	move.l	(a1)+,(a0)+	; Copy a line from screen0


                                        neowall.s            Page 3     MADMAC Atari Macro Assembler 0.11j (Atari ST)


   97  0000014E  51CDFFFC               	dbra	d5,.t1
   98  00000152  3A3C0027               	move	#39,d5
   99  00000156  20DA                   .t2:	move.l	(a2)+,(a0)+	; Copy a line from screen1
  100  00000158  51CDFFFC               	dbra	d5,.t2
  101  0000015C  3A3C0027               	move	#39,d5
  102  00000160  20DB                   .t3:	move.l	(a3)+,(a0)+	; Copy a line from screen2
  103  00000162  51CDFFFC               	dbra	d5,.t3
  104  00000166  51CEFFE0               	dbra	d6,.linlp
  105  0000016A  23C8xxxxxxxx           	move.l	a0,buffptr
  106  00000170  5C47                   	addq	#6,d7
  107  00000172  BE7C000C               	cmp	#12,d7
  108  00000176  6F80                   	ble	.rowlp
  109                                   
  110  00000178  7810                   	moveq	#16,d4
  111  0000017A  49F9xxxxxxxx           	lea	handlist,a4
  112  00000180  3F344000               .close:	move	(a4,d4),-(sp)	; FOR (Nine files) DO Close all
                                        	Gemdos	$3e,4		; Fclose
       00000184  3F3C003E             @ 	move.w	#$3e,-(sp)
       00000188  4E41                 @ 	trap	#1
                                      @ 	.if $4 <= 8
       0000018A  584F                 @ 	addq	#$4,sp
                                      @ 	.else
                                      - 	add.w	#$4,sp
  113                                 - 	.endif
  114  0000018C  4A40                   	tst	d0
  115  0000018E  6B00xxxx               	bmi	abort		; IF (Error Closing a file) ABORT
  116  00000192  5544                   	subq	#2,d4
  117  00000194  6AEA                   	bpl	.close
  118                                   
  119  00000196  4EB9xxxxxxxx           	jsr	initmaus	; Install our own mouse handler
  120                                   
  121  0000019C  23F80070xxxxxxxx       	move.l	vblvect,oldvbl
  122  000001A4  21FCxxxxxxxx0000       	move.l	#vbl,vblvect	; Capture System VBlank Interrupt
  123                                   
  124                                   ;
  125                                   ;	Scrolling Demo loop
  126                                   ;
  127                                   wavelp:
                                        	Bconstat CON		; Keyboard Polling
       000001AC  3F3C0002             @ 	move.w	#CON,-(sp)
                                      @ 	Bios 1,4
       000001B0  3F3C0001             @ 	move.w	#$1,-(sp)
       000001B4  4E4D                 @ 	trap	#13
                                      @ 	.if $4 <= 8
       000001B6  584F                 @ 	addq	#$4,sp
                                      @ 	.else
                                      - 	add.w	#$4,sp
  128                                 - 	.endif
  129  000001B8  4A40                   	tst	d0
  130  000001BA  6700xxxx               	beq	noexit		; IF (Keyboard Input Available) THEN
                                        	Bconin	CON
       000001BE  3F3C0002             @ 	move.w	#CON,-(sp)
                                      @ 	Bios 2,4
       000001C2  3F3C0002             @ 	move.w	#$2,-(sp)
       000001C6  4E4D                 @ 	trap	#13
                                      @ 	.if $4 <= 8
       000001C8  584F                 @ 	addq	#$4,sp
                                      @ 	.else
                                      - 	add.w	#$4,sp
  131                                 - 	.endif
  132  000001CA  B03C0003               	cmp.b	#'C'-64,d0
  133  000001CE  6700xxxx               	beq	exit		; CTRL-C ==> EXIT
  134                                   noexit:
  135  000001D2  60D8                   	bra	wavelp
  136                                   exit:
  137                                   ;
  138                                   ;	System Tear-Down
  139                                   ;
  140  000001D4  21F9xxxxxxxx0000       	move.l	oldvbl,vblvect	; Restore System VBlank Interrupt
  141                                   
  142  000001DC  11FC0000820F           	move.b	#0,linewid
  143  000001E2  11FC00008265           	move.b	#0,hscroll	; Restore Normal Display
  144                                   
  145  000001E8  4EB9xxxxxxxx           	jsr	unmaus		; Restore System mouse handler
  146                                   
  147  000001EE  41F9xxxxxxxx           	lea	oldpal,a0
  148  000001F4  43F88240               	lea	palette,a1
  149  000001F8  303C000F               	move	#15,d0
  150  000001FC  32D8                   .unplp:	move.w	(a0)+,(a1)+
  151  000001FE  51C8FFFC               	dbra	d0,.unplp	; restore old color palette
  152                                   
                                        abort:	User			; return to user mode
                                      @ 	Gemdos	$20,6
       00000202  3F3C0020             @ 	move.w	#$20,-(sp)
       00000206  4E41                 @ 	trap	#1
                                      @ 	.if $6 <= 8
       00000208  5C4F                 @ 	addq	#$6,sp
                                      @ 	.else
                                      - 	add.w	#$6,sp
  153                                 - 	.endif
                                        	Pterm0			; return to GEMDOS


                                        neowall.s            Page 4     MADMAC Atari Macro Assembler 0.11j (Atari ST)


       0000020A  4267                 @ 	clr.w	-(sp)
       0000020C  4E41                 @ 	trap	#1
  154  0000020E  4AFC                 @ 	illegal
  155                                   
  156                                   ;
  157                                   ;	VBL	Vertical-Blank Interrupt Server
  158                                   ;
  159                                   vbl:
  160  00000210  48E78080               	movem.l	d0/a0,-(sp)
  161                                   
  162  00000214  3039xxxxxxxx           	move	xmouse,d0
  163  0000021A  C07C000F               	and	#$0f,d0
  164  0000021E  11C08265               	move.b	d0,hscroll	; Xpos MOD 16 = Scroll count
  165  00000222  4A00                   	tst.b	d0
  166  00000224  6600xxxx               	bne	.non0		; IF (Scrolling) THEN 4 word offset
  167  00000228  11FC00A0820F           	move.b	#160,linewid
  168  0000022E  6000xxxx               	bra	.join
  169  00000232  11FC009C820F           .non0:	move.b	#156,linewid
  170                                   .join:
  171  00000238  41F9xxxxxxxx           	lea	bigbuff,a0
  172  0000023E  3039xxxxxxxx           	move	ymouse,d0
  173  00000244  C0FC01E0               	mulu	#3*160,d0	; Ypos * Linewid = Vertical offset
  174  00000248  D1C0                   	adda.l	d0,a0
  175  0000024A  3039xxxxxxxx           	move	xmouse,d0
  176  00000250  E240                   	asr	#1,d0
  177  00000252  C07CFFF8               	and	#$fff8,d0	; 8*(Xpos DIV 16) = Line offset
  178  00000256  D0C0                   	adda	d0,a0		; a0 = Video Base Address
  179  00000258  23C8xxxxxxxx           	move.l	a0,vbltemp
  180  0000025E  11F9xxxxxxxx0000       	move.b	vbltemp+1,vcounthi
  181  00000266  11F9xxxxxxxx0000       	move.b	vbltemp+2,vcountmid
  182  0000026E  11F9xxxxxxxx0000       	move.b	vbltemp+3,vcountlo
  183                                   
  184  00000276  4CDF0101               	movem.l	(sp)+,d0/a0
  185  0000027A  4EF9                   	.dc.w	$4ef9
  186  0000027C  00000000               oldvbl:	.dc.l	0		; JMP (Old-Vblank)
  187  00000280  4AFC                   	illegal
  188                                   
  189                                   ;
  190                                   ;	DATA STORAGE
  191                                   ;
  192  00000282                         	.data
  193                                   neofiles:			; NEO filename search string
  194  00000000  2A2E6E656F00           	.dc.b	"*.neo",0
  195                                   
  196                                   	.even
  197                                   
  198                                   ;
  199                                   ;	RANDOM DATA STORAGE
  200                                   ;
  201  00000006                         	.bss
  202                                   
  203                                   oldpal:
  204  00000000 =00000010               	.ds.l	16		; Original color palette
  205                                   
  206                                   handlist:			; Array of Active Handles (9)
  207  00000040 =00000009               	.ds.w	9
  208                                   buffptr:			; Load ptr for bigbuff
  209  00000052 =00000001               	.ds.l	1
  210                                   bigbuff:			; Mega-Image Buffer 
  211  00000056 =00046500               	.ds.b	9*32000
  212                                   threebuf:			; Temporary Triple-Image Buffer 
  213  00046556 =00017700               	.ds.b	3*32000
  214                                   
  215                                   vbltemp:			; Vblank Temporary Storage
  216  0005DC56 =00000001               	.ds.l	1
  217                                   
  218  0005DC5A =00000100               	.ds.l	256		; (stack body)
  219                                   mystack:
  220  0005E05A =00000001               	.ds.l	1		; Local Stack Storage
  221                                   
  222                                   	.end


                                                             Page 5     MADMAC Atari Macro Assembler 0.11j (Atari ST)
Symbol Table

            .close 00000180  t              Rwabs macro                    devno 00000000   #             nvbls 00000454 ea 
          .gotnine 000000B2  t              SSIZE 0000000E  a              devno 00000001   #            offset 00000000   #
             .join 00000238  t           Setcolor macro                    devno 00000001   #            oldpal 00000000  b 
            .linlp 00000148  t             Setexc macro                    devno 00000001   #            oldvbl 0000027C  t 
          .neoloop 0000005E  t         Setpalette macro                    devno 00000001   #                op 00000001   #
             .non0 00000232  t          Setscreen macro                  diskctl FFFF8604 ea                 p1 00000001   #
            .ploop 000000E4  t             String macro                 disktype 00000002   #                p2 00000002   #
            .redlp 0000010A  t              Super macro                    dmahi FFFF8609 ea                 p3 00000003   #
            .rowlp 000000F8  t            Supexec macro                    dmalo FFFF860D ea            palette FFFF8240 ea 
               .t1 0000014C  t                TAB 00000009 ea             dmamid FFFF860B ea            palmode 00000448 ea 
               .t2 00000156  t              TBASE 00000008  a                drv 00000000   #             param 00000001   #
               .t3 00000160  t             TEXTSZ 0000000C ea                dtr 00000010 ea            physloc 00000001   #
            .unplp 000001FC  t               TLEN 0000000C  a             end_os 000004FA ea            phystop 0000042E ea 
               AUX 00000001 ea              TSIZE 00000002  a         etv_critic 00000404 ea            prv_aux 00000512 ea 
             BBASE 00000018  a            Tickcal macro                 etv_term 00000408 ea           prv_auxo 0000050E ea 
              BLEN 0000001C  a           Tsetdate macro                etv_timer 00000400 ea            prv_lst 0000050A ea 
              BPSZ 00000100 ea           Tsettime macro                 etv_xtra 0000040C ea           prv_lsto 00000506 ea 
             BSIZE 0000000A  a               User macro                  exec_os 000004FE ea                ptr 00000000   #
             BSSSZ 0000001C ea               XXX1 00000012  a           execflag 00000003   #               ptr 00000000   #
            Bconin macro                     XXX2 00000016  a               exit 000001D4  t                ptr 00000001   #
           Bconout macro                     XXX3 0000001A  a               fifo FFFF8606 ea              recno 00000003   #
          Bconstat macro                     XXXX 00000028  a               file 00000000   #          resvalid 00000426 ea 
           Bcostat macro                    Xbios macro                     file 00000000   #         resvector 0000042A ea 
              Bios macro                  _____md 0000049E ea               file 00000000   #           retcode 00000001   #
           CMDLINE 00000080  a          _autopath 000004CA ea              flock 0000043E ea                rez 00000002   #
               CON 00000002 ea           _bootdev 00000446 ea              fspec 00000000   #           rezmode FFFF8260 ea 
                CR 0000000D ea              _bufl 000004B2 ea               func 00000000   #               rsr FFFFFA2B ea 
        CURS_BLINK 00000002 ea           _cmdload 00000482 ea             giaamp 00000008 ea             rwflag 00000000   #
      CURS_GETRATE 00000005 ea           _drvbits 000004C2 ea             gibamp 00000009 ea        sav_context 000004AE ea 
         CURS_HIDE 00000000 ea           _dskbufp 000004C6 ea             gicamp 0000000A ea           save_row 000004AC ea 
      CURS_NOBLINK 00000003 ea           _frclock 00000466 ea           gicrnvlp 0000000C ea             savptr 000004A2 ea 
      CURS_SETRATE 00000004 ea           _fverify 00000444 ea          gifienvlp 0000000B ea                scr FFFFFA27 ea 
         CURS_SHOW 00000001 ea            _hz_200 000004BA ea            gimixer 00000007 ea           scr_dump 00000502 ea 
            Cconws macro                  _membot 00000432 ea            ginoise 00000006 ea           screenpt 0000045E ea 
          Cursconf macro                  _memtop 00000436 ea            giporta 0000000E ea             secreg 00000084 ea 
            DATASZ 00000014 ea            _nflops 000004A6 ea            giportb 0000000F ea             sectno 00000002   #
             DBASE 00000010  a           _prt_cnt 000004EE ea             giread FFFF8800 ea             sectno 00000002   #
              DLEN 00000014  a            _prtabt 000004F0 ea           giselect FFFF8800 ea             sectno 00000002   #
             DSIZE 00000006  a           _shell_p 000004F6 ea           gitoneac 00000001 ea           seekrate 00000440 ea 
               DTA 00000020  a           _sysbase 000004F2 ea           gitoneaf 00000000 ea           serialno 00000001   #
           Dgetdrv macro                 _timr_ms 00000442 ea           gitonebc 00000003 ea             sideno 00000004   #
            Drvmap macro                _v_bas_ad 0000044E ea           gitonebf 00000002 ea             sideno 00000004   #
           Dsetdrv macro                 _vbclock 00000462 ea           gitonecc 00000005 ea             sideno 00000004   #
             ENVIR 0000002C  a          _vbl_list 000004CE ea           gitonecf 00000004 ea             sideno 00000004   #
           FILE_ID 00000000  a          _vblqueue 00000456 ea            giwrite FFFF8802 ea                spt 00000002   #
            Fclose macro                    abort 00000202  t               gpip FFFFFA01 ea           sshiftmd 0000044C ea 
           Fcreate macro                     addr 00000000   #               gpo 00000040 ea              start 00000000  t 
           Fdelete macro                     addr 00000000   #            handle 00000000   #               str 00000000   #
           Fgetdta macro                      aer FFFFFA03 ea             handle 00000000   #            string 00000000   #
           Flopfmt macro                     attr 00000001   #            handle 00000000   #            strobe 00000020 ea 
            Floprd macro                  bigbuff 00000056  b             handle 00000001   #           swv_vec 0000046E ea 
           Flopver macro                    block 00000000   #          handlist 00000040  b           syncmode FFFF820A ea 
            Flopwr macro                      buf 00000001   #          hdv_boot 0000047A ea               tacr FFFFFA19 ea 
             Fopen macro                      buf 00000000   #           hdv_bpb 00000472 ea               tadr FFFFFA1F ea 
             Fread macro                      buf 00000000   #          hdv_init 0000046A ea               tbcr FFFFFA1B ea 
             Fseek macro                      buf 00000000   #       hdv_mediach 0000047E ea               tbdr FFFFFA21 ea 
           Fsetdta macro                      buf 00000000   #            hdv_rw 00000476 ea              tcdcr FFFFFA1D ea 
           Fsfirst macro                      buf 00000000   #           howmuch 00000000   #              tcdr FFFFFA23 ea 
            Fsnext macro                      buf 00000002   #           hscroll FFFF8265 ea               tddr FFFFFA25 ea 
            Fwrite macro                      buf 00000002   #              iera FFFFFA07 ea              themd 0000048E ea 
            Gemdos macro                  buffptr 00000052  b               ierb FFFFFA09 ea           threebuf 00046556  b 
            Getbpb macro                     char 00000001   #              imra FFFFFA13 ea               time 00000000   #
            Getmpb macro                    clean 00000001   #              imrb FFFFFA15 ea            trackno 00000003   #
            Getrez macro                    clean 00000001   #          initmaus external  ax           trackno 00000003   #
           Gettime macro                    clean 00000001   #           interlv 00000005   #           trackno 00000003   #
          HEADSIZE 0000001C ea             cmdreg 00000080 ea               ipra FFFFFA0B ea            trackno 00000003   #
             HITPA 00000004  a               cnt1 00000000   #              iprb FFFFFA0D ea             trkreg 00000082 ea 
              IKBD 00000004 ea               code 00000000   #              isra FFFFFA0F ea           trp14ret 00000486 ea 
          Initmous macro                   colnum 00000000   #              isrb FFFFFA11 ea              trpno 00000000   #
          Kbdvbase macro                    color 00000001   #             keybd FFFFFC02 ea              trpno 00000000   #
           Kbshift macro                 colorptr 0000045A ea             keyctl FFFFFC00 ea              trpno 00000000   #
                LF 0000000A ea           constate 000004A8 ea            linewid FFFF820F ea                tsr FFFFFA2D ea 
            LOWTPA 00000000  a            conterm 00000484 ea                loc 00000001   #              type 00000000   #
           Logbase macro                    count 00000002   #            logloc 00000000   #               ucr FFFFFA29 ea 
              MIDI 00000003 ea              count 00000005   #             magic 00000006   #               udr FFFFFA2F ea 
             MYDTA 00000020 ea              count 00000005   #          memcntlr 00000424 ea             unmaus external  ax
            Malloc macro                    count 00000005   #           memconf FFFF8001 ea            vbasehi FFFF8201 ea 
           Mediach macro                    count 00000000   #           memval2 0000043A ea            vbaselo FFFF820D ea 
             Mfree macro                    count 00000001   #          memvalid 00000420 ea           vbasemid FFFF8203 ea 
            Midiws macro                    count 00000001   #               mfp FFFFFA00 ea                vbl 00000210  t 
           Mshrink macro                criticret 0000048A ea               midi FFFFFC06 ea             vblsem 00000452 ea 
            PARENT 00000024  a            datareg 00000086 ea            midictl FFFFFC04 ea            vbltemp 0005DC56  b 
               PRT 00000000 ea               date 00000000   #              mode 00000000   #           vblvect 00000070 ea 
             Pexec macro                      ddr FFFFFA05 ea               mode 00000001   #          vcounthi FFFF8205 ea 
          Physbase macro               defshiftmd 0000044A ea               mode 00000001   #          vcountlo FFFF8209 ea 
           Protobt macro                      dev 00000000   #              mode 00000002   #         vcountmid FFFF8207 ea 
             Pterm macro                      dev 00000000   #              mode 00000000   #               vec 00000001   #
            Pterm0 macro                      dev 00000000   #           mystack 0005E05A  b                vec 00000002   #
          Ptermres macro                      dev 00000004   #          neofiles 00000000  d             vecnum 00000000   #
            RAWCON 00000005 ea                dev 00000000   #            newsiz 00000001   #            virgin 00000007   #
            Random macro                    devno 00000000   #            noexit 000001D2  t                 vr FFFFFA17 ea 


                                                             Page 6     MADMAC Atari Macro Assembler 0.11j (Atari ST)
Symbol Table

            wavelp 000001AC  t 
             where 00000000   #
            xmouse external  ax
              xrts 00000008 ea 
            ymouse external  ax

