image: atlassian/default-image:4

# Clone full depth Git repo since version number is calculated from number of commits
clone:
  depth: full

pipelines:
 default:
   - step:
      name: Default steps
      script:
      - echo "Default building steps for all branches!"
 pull-requests:
  '**':
   - step:
      name: Building for pull request
      script:
      - echo "Building for pull request"
   - step:
      name: 'Prepare toolchain and perform test build.'
      deployment: production
      script: 
        - apt-get install -y software-properties-common
        - add-apt-repository -y ppa:vriviere/ppa
        - apt-get update -qq
        - apt-get install -y cross-mint-essential scons upx vim-common
        - mkdir ../libcmini
        - cd ../libcmini
        # Build breaks with libcmini >= 0.52!
        - wget -q -O - "https://github.com/freemint/libcmini/releases/download/v0.51/libcmini-0.51.tar.gz" | tar xzf -
        - export LIBCMINI="$PWD/lib/"
        - mkdir ../builddir
        - cd ../builddir
        - scons -C $BITBUCKET_CLONE_DIR
        - TARGETDIR=`basename $BITBUCKET_CLONE_DIR`
        - cp ./netusbee/$TARGETDIR/src/*.tos $BITBUCKET_CLONE_DIR # to treat as artifact
        - cp ./netusbee/$TARGETDIR/src/uip.tos ./uip-netusbee-pr.tos
        - cp ./usb/$TARGETDIR/src/*.tos $BITBUCKET_CLONE_DIR # to treat as artifact
        - cp ./usb/$TARGETDIR/src/uip.tos ./uip-usb-pr.tos
      artifacts: # Save resulting files
          - uip-netusbee-pr.tos
          - uip-usb-pr.tos

 branches:
  master:
  - step:
      name: Building branch
      script:
        - echo "Building branch ${BITBUCKET_BRANCH}"
  - step:
        name: 'Prepare toolchain, build and upload.'
        deployment: production
        script: # Modify the commands below to build your repository.
          - apt-get install -y software-properties-common
          - add-apt-repository -y ppa:vriviere/ppa
          - apt-get update -qq
          - apt-get install -y cross-mint-essential scons upx vim-common
          - mkdir ../libcmini
          - cd ../libcmini
          # Build breaks with libcmini >= 0.52!
          - wget -q -O - "https://github.com/freemint/libcmini/releases/download/v0.51/libcmini-0.51.tar.gz" | tar xzf -
          - export LIBCMINI="$PWD/lib/"
          - mkdir ../builddir
          - cd ../builddir
          - scons -C $BITBUCKET_CLONE_DIR
          - TARGETDIR=`basename $BITBUCKET_CLONE_DIR`
          - cp ./netusbee/$TARGETDIR/src/*.tos $BITBUCKET_CLONE_DIR # to treat as artifact
          - cp ./netusbee/$TARGETDIR/src/uip.tos ./uip-netusbee-master.tos
          - cp ./usb/$TARGETDIR/src/*.tos $BITBUCKET_CLONE_DIR # to treat as artifact
          - cp ./usb/$TARGETDIR/src/uip.tos ./uip-usb-master.tos
          - curl -X POST --user "${BB_AUTH_STRING}" "https://api.bitbucket.org/2.0/repositories/${BITBUCKET_REPO_OWNER}/${BITBUCKET_REPO_SLUG}/downloads" --form files=@"./uip-netusbee-master.tos"
          - curl -X POST --user "${BB_AUTH_STRING}" "https://api.bitbucket.org/2.0/repositories/${BITBUCKET_REPO_OWNER}/${BITBUCKET_REPO_SLUG}/downloads" --form files=@"./uip-usb-master.tos"
        artifacts: # Save resulting files
          - uip-netusbee-${BITBUCKET_BRANCH}.tos
          - uip-usb-${BITBUCKET_BRANCH}.tos
  '**':
  - step:
      name: Building branch
      script:
        - echo "Building branch ${BITBUCKET_BRANCH}"
  - step:
     name: 'Prepare toolchain and perform test build.'
     deployment: production
     script: 
        - apt-get install -y software-properties-common
        - add-apt-repository -y ppa:vriviere/ppa
        - apt-get update -qq
        - apt-get install -y cross-mint-essential scons upx vim-common
        - mkdir ../libcmini
        - cd ../libcmini
        # Build breaks with libcmini >= 0.52!
        - wget -q -O - "https://github.com/freemint/libcmini/releases/download/v0.51/libcmini-0.51.tar.gz" | tar xzf -
        - export LIBCMINI="$PWD/lib/"
        - mkdir ../builddir
        - cd ../builddir
        - scons -C $BITBUCKET_CLONE_DIR
        - TARGETDIR=`basename $BITBUCKET_CLONE_DIR`
        - cp ./netusbee/$TARGETDIR/src/*.tos $BITBUCKET_CLONE_DIR # to treat as artifact
        - cp ./netusbee/$TARGETDIR/src/uip.tos ./uip-netusbee-${BITBUCKET_BRANCH}.tos
        - cp ./usb/$TARGETDIR/src/*.tos $BITBUCKET_CLONE_DIR # to treat as artifact
        - cp ./usb/$TARGETDIR/src/uip.tos ./uip-usb-${BITBUCKET_BRANCH}.tos
     artifacts: # Save resulting files
          - uip-netusbee-${BITBUCKET_BRANCH}.tos
          - uip-usb-${BITBUCKET_BRANCH}.tos
