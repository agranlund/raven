----------------------------------------------------------------
FPEmu v.241201
Software FPU emulator for 68000-68060
----------------------------------------------------------------

Known limitations:

 - An emulated FPU is very slow.
   The purpose of the emulator is to be able to run programs that makes
   light use of floating point, nor not at all but still requires one.
   You need a real FPU to run FPU heavy applications.

 - 68060 only:
   Some programs look at the PCR register to detect 68060 LC/EC and there is
   nothing that can be done to trick these programs into using the emulated FPU.

   ! MiNT itself does this !

   You _can_ use this under MiNT, if you run it after the MiNT kernel has started
   but if you are multitasking programs that both are using the virtual FPU
   then bad things can happen.
   Do so at your own risk by placing fpemu.prg _after_ mint.prg

 - There can be bugs

 - Some programs may be able to see through the facade even though it
   tries to be invisible to the system.

----------------------------------------------------------------

Supported systems:

68000 TOS1 and later (1)
68010 TOS1 and later
68020 TOS1 and later
68030 TOS1 and later
68040 TOS2 and later
68060 TOS2 and later (2)

(1) FPEmu cannot masquerade itself as hardware on 68000 systems
    so programs that do low-level fpu detection will think there
    is no fpu - and perhaps not run because of it.
    Programs which only look at the system cookie will still be ok.

(2) Some programs checks the CPU ID instead of looking for an FPU.
    Nothing can be done to trick these programs into using the virtual FPU.
    Most programs only look at the system cookie though.

----------------------------------------------------------------

Usage:

 Put in AUTO folder.
 You can now have a (slow) virtual 68881.

If using MiNT:

 You normally want to run it _before_ MiNT to ensure safe operation.
 However, this is not possible on 68060 and there you don't have
 any choice but to run it _after_ even if that is generally a bad idea.

 Technical mumbojumbo:

 Running it _before_ MINT ensures that MiNT does all the normally required
 FPU stuff when context switching between multitasking applications.

 * There is an additional performance penalty here since it will
   call into the emulator on each context switch.

 * However it also means that you can safely multitask programs
   which are using the (virtual) FPU.

 If you start it _after_ MiNT then MiNT itself thinks there is
 no FPU, so it will not save/restore FPU registers on context switches.

 * In this case, be careful about not multitasking programs that
   are using the (virtual) FPU, or at least don't get surprised
   if bad things happens in them if you do.

----------------------------------------------------------------

This product uses a part of NetBSD kernel. 
This product includes software developed by the NetBSD Foundation, Inc. and its contributors
This product includes software developed by the University of California, Lawrence Berkeley Laboratory.
This product includes software developed by Gordon Ross

BSD License
============

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. Neither the name of the author nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

Copyright (c) 1992, 1993 The Regents of the University of California.  All rights reserved.
Copyright (c) 1995 Ken Nakata. All rights reserved.
Copyright (c) 1995 Gordon W. Ross. All rights reserved.
Copyright (c) 2013 Tetsuya Isaki. All rights reserved.
Copyright (c) 2022-2024 Anders Granlund. All rights reserved.
