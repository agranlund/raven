!tex \documentstyle[11pt]{article}
!stg @subject "Documentation"
!english
!title   Documentation of the card
!programimage eiffelt.img
!program Eiffel 3
!version Version firmware 1.10
!date    (!today)
!author  Didier MEQUIGNON
!street  25, rue de l'Ascenseur
!town    62510 ARQUES FRANCE
!email   aniplay@wanadoo.fr
!use_auto_subtocs    [info,html,stg,tvh,win]
!use_auto_subsubtocs [info,html,stg,tvh,win]
!no_effects          [asc]
!begin_document
!maketitle
!tableofcontents

!node Features

These interface handle all PS/2 Keyboard and mouse:

!begin_itemize
!item Keyboard with 102 or 105 keys and more with the set 2 (AT) or the 
set 3 (PS/2).
!item The keyboard can work (!B) without driver (!b) and you can build 
your tables (Look at the 'Update/Extra' page). 
!item Mouse up to 5 buttons.
!item Mouse single and double wheel (IntelliMouse).
!item Compatible with ALL Atari computers range (ST, STF, STE, MegaST, 
MegaSTE, TT and Falcon).
!item Two Atari standard joysticks support DB-9.
!item Motor command for ventilator and temperature sensor (look at 
'Temperature').
!item LCD clock and temperature display (look at 'LCD Display'), and 
more...
!item Near all IKBD supported (only IKBD_SET_MOUSE_THRESHOLD, 
IKBD_SET_FIRE_BUTTON_MONITOR, and IKBD_CONTROLLER_EXECUTE are not 
supported). Look the 'Atari Keyboard' part.
!item Updating eiffel capabilities from GEM application EIFFELCF.APP (look 
at 'Eiffel Configuration').
!end_itemize


!node Eiffel Configuration

!subnode Mouse

!image eiffel1.img

Inside this page you can change the code send with the mouse buttons and 
wheel.

!subnode Keyboard

!image eiffel2.img

Inside this page you can select some values with unused keys becauce this 
keys not exits on the original Atari keyboard.

!image popup.img

If you're not interrested by this values, for example if you want '(' ')' 
on 'F12' 'F13' since Eiffel 1.0.7 you can build your tables. Look at the 
'Update/Extra' page.

The IKBD status frame not use scancode, it's a good choice because there 
are not a lot of unused scancodes on the Atari.


!subnode Temperature

!image eiffel3.img

Inside this page you can select the temperature levels where Eiffel 
start/stop the fans.

The second part of this page allows to program the sensor if you get a 
sensor curve different than a CTN 10 kohms at 25 degrees Celcius. This 
values are stored in the EEProm so if you update the firmare where the 
temperature measurement was different (before Eiffel 1.0.6) you need to 
program the sensor and the temperature levels after the firmware update.

Note than ADC is an analog input of the CPU used on Eiffel, a PIC. The 
temperature display at this page is not updated without restart of 
EIFFELCF.APP. You need to install E_TEMP.PRG inside the AUTO folder. If 
you have a CT60, you can see inside CT60CONF.CPX the temperature curve of 
the last hour inside the CPU temperature page.


!subnode Update/Extra

!image eiffel4.img

Inside this page you can update the Eiffel firmware, change the 
configuration of your AT keyboard (set 2 - AT or set 3 - PS/2), and change 
the scancodes tables of Eiffel.

Since Eiffel 1.10, there are two HEX files for update the Firmware :

!begin_itemize
!item The normal version eiffel.hex need a minimum a PIC programmed with 
Eiffel 1.0.4 (backward compatibility).  
!item The clock interrupt version eiffel_i.hex (who not lost seconds) need 
a PIC programmed with Eiffel 1.10. This new Flash boot loader displays on 
the LCD 2x16 the programming address, and 'OK' at the end if the checksum 
is good. 
!end_itemize


!subsubnode Load the firmware

The firmware and keyboard tables added since Eiffel 1.0.7 are stored in 
the Flash program memory. If you're not interrested by differents 
scancodes by the same key (look also at 'Keyboard table'), just press on  
'Load HEX file' for load EIFFEL.HEX in the memory, and press on the 
'Program FLASH' button.

If you want different scancodes tables, you must load this files before 
press on the 'Program FLASH' button:

!begin_itemize
!item Load Shift Table: table used with the PS/2 Shift state.
!item Load AltGr Table: table used with the PS/2  AltGr state.
!item Load Modifier Table: table used for force CTRL, ALT, and SHIFT to 
the Atari states.
!end_itemize

Note than the normal Unshift state is not stored inside the Flash program
memory (look also at 'Keyboard table') but inside the EEProm data memory.

Different tables (Unshift, Shift, Altgr, etc..) for the same key means 
differents files to load by country. If you not found your country or you 
want another tables, or example if you want '(' ')' on 'F12' 'F13', you 
can build your files (look at 'Build your tables' and 'Keyboard table'). 

The Eiffel firmware loaded by EIFFELCF.APP is on the two last banks
of the Flash, if the ckecksum is bad the firmware is marked invalid. It's 
possible to force starting on the original firmware flashed by a PIC 
programmer inside the two first banks of the Flash, if you press the fire 
button of the Joystick 1 during the power-up (RC4 to the ground on the 
'Schematic'). 


!subsubnode Keyboard table

By the past, Eiffel had just a single table for convert the set 3 - PS/2 
scancodes to Atari scancodes. This table is always stored in the EEProm 
data memory. All parameters of Eiffel (mouse, keyboard, temperature, and 
set selection) are stored inside this memory. With a single table, you 
need a driver for change the XBIOS tables who convert scancodes in ASCII
codes. For example for get the '{' character you did press SHIFT+ALT+'{' 
but on PS/2 keyboard this one is on the '4' key... So we need different 
scancodes for the same key for a work without driver. This feature is 
possible since Eiffel 1.0.7, and need more tables, the EEProm data memory 
was full (256 bytes), so the Flash program memory is used for store more 
tables. For change this tables added you need to upload the firmware with 
this tables (look at 'Load the firmware').

If you're not interrested by differents scancodes by the same key you can 
press on 'Init Keyboard Table Set 3' for restore the default table. In 
this case the changes set before on the 'Keyboard' page are lost.

If you want different scancodes tables, you must load in the EEProm data 
memory the Unshift file by press the 'Load Keyb Table' button (look also 
at 'Build your tables').


!subsubnode Change the keyboard set 

If you want use Multimedia keys or your keyboard not like the default 
PS/2 set 3, you can select the AT set 2 used on PC with the popup button.

After, you must press the 'Reset' button for reset Eiffel with the new set.
 

!subsubnode Build your tables

The tables Unshift, Shift, AltGr, and Modifier are translation tables from 
PS/2 set 3 to Atari. This tables are loaded from .inf files. 

You need a text editor for build or modify your files.

If the set 2 is used, Eiffel convert only 50 main characters of the set 2 
to the set 3: 

!begin_verbatim
 0x07 (F1), 0x0E, 0x0F (F2), 0x11, 0x12, 0x13 (><), 0x15 (AQ),
 0x16 (1), 0x17 (F3),  0x1E (2), 0x1F (F4), 0x24 (E), 0x25 (4),
 0x26 (3), 0x27 (F5), 0x2E (5), 0x2F (F6), 0x36 (6), 0x37 (F7), 
 0x39 (ALTGR), 0x3A (,M), 0x3D (7), 0x3E (8), 0x3F (F8), 0x41 (;,),
 0x45 (0), 0x46 (9), 0x47 (F9), 0x49 (:.), 0x4A (!/), 0x4C (M;),
 0x4E ()-), 0x4F (F10), 0x52 (—'), 0x53 (*\), 0x54 (^[), 0x55 (=),
 0x56 (F11), 0x57 (PRTSCR), 0x59, 0x5B ($]), 0x5E (F12), 0x5F (SCROLL),
 0x62 (PAUSE), 0x65 (END), 0x6D (PAGEDN), 0x6F (PAGEUP), 0x76 (VERRN),
 7F (SLEEP), 80 (POWER), 81 (WAKE), 0x8B (WLEFT), 0x8C (WRIGHT),
 0x8E (WAPP).
!end_verbatim

That means than others keys cannot send different scancodes for the same 
key and use only an internal translation table from AT set 2 to Atari.

The stucture of this .inf files is important, en entry is a line where the 
beginning is ':', after there are an hexa value who is a Atari scancode 
returned by Eiffel excepted for the Modifier table who is a little bit 
special. At the right there are a comment who contains the index (offset) 
of the PS/2 set 3.

(!U)
Example
(!u)

(!B)
Unhift Table
(!b)
not loaded with the firmware !

!begin_verbatim
/* German Unshift table stored in EEPROM                */
/* Hexa values, 00: not used                            */
/*   scancode + 80: status frame => send                */
/*      F6 05 00 00 00 00 00 scancode, or send          */
/*      F6 05 00 00 00 00 00 scancode+80 for break code */
/* Azerty keys, Querty keys are in ()                   */
:00  /* offset + 0x00  not used */
:00  /* offset + 0x01  not used */
:00  /* offset + 0x02  not used */
:00  /* offset + 0x03  not used */
:00  /* offset + 0x04  not used */
:00  /* offset + 0x05  not used */
:00  /* offset + 0x06  not used */
:3B  /* offset + 0x07 F1 */
:01  /* offset + 0x08 ESC */
:00  /* offset + 0x09  not used */
:00  /* offset + 0x0A  not used */
:00  /* offset + 0x0B  not used */
:00  /* offset + 0x0C  not used */
:0F  /* offset + 0x0D TABULATION */
:29  /* offset + 0x0E <2> (`) ( at left key 1, Deutsch ^ ) */
:3C  /* offset + 0x0F F2 */
:00  /* offset + 0x10  not used */
:1D  /* offset + 0x11 LEFT CTRL (Atari has just CTRL) */
:2A  /* offset + 0x12 LEFT SHIFT */
:60  /* offset + 0x13 >< */
:3A  /* offset + 0x14 CAPS */
:10  /* offset + 0x15 A (Q) */
[...]
!end_verbatim

The Unshift table is the first level of the tables, a :00 value mean than 
there are no scancode returned for this PS/2 offset. Normally it's an 
unused key. If a scancode is used (value <> :00), you can use other 
tables level (Shift and AltGr).

(!B)
Shift Table
(!b)

!begin_verbatim
/* German Shift table stored in Flash (program memory)  */
/* Hexa values, 00: unused => use the Unshift table     */
/*              FF: invalid => no scancode              */
/*   scancode + 80: status frame => send                */
/*      F6 05 00 00 00 00 00 scancode, or send          */
/*      F6 05 00 00 00 00 00 scancode+80 for break code */
/* Azerty keys, Querty keys are in ()                   */
:00  /* offset + 0x00  not used */
:00  /* offset + 0x01  not used */
:00  /* offset + 0x02  not used */
:00  /* offset + 0x03  not used */
:00  /* offset + 0x04  not used */
:00  /* offset + 0x05  not used */
:00  /* offset + 0x06  not used */
:54  /* offset + 0x07 F1 */
:01  /* offset + 0x08 ESC */
:00  /* offset + 0x09  not used */
:00  /* offset + 0x0A  not used */
:00  /* offset + 0x0B  not used */
:00  /* offset + 0x0C  not used */
:0F  /* offset + 0x0D TABULATION */
:34  /* offset + 0x0E <2> (`) ( at left key 1 ) */
:55  /* offset + 0x0F F2 */
:00  /* offset + 0x10  not used */
:1D  /* offset + 0x11 LEFT CTRL (Atari has just CTRL) */
:2A  /* offset + 0x12 LEFT SHIFT */
:60  /* offset + 0x13 >< */
:3A  /* offset + 0x14 CAPS */
:10  /* offset + 0x15 A (Q) */
[...]
!end_verbatim

You can see than there are differences of the scancode returned with the 
normal Unshift state of 'F1' and the Shift state of 'F1'. A value of :00 
means than the Shift state is the same value than the Unshift state. 
A value of :FF is a little bit special because no scancode is returned.

(!B)
AltGr Table
(!b)

!begin_verbatim
/* German AltGR table stored in Flash (program memory)  */
/* Hexa values, 00: unused => use the Unshift table     */
/*              FF: invalid => no scancode              */
/*   scancode + 80: status frame => send                */
/*      F6 05 00 00 00 00 00 scancode, or send          */
/*      F6 05 00 00 00 00 00 scancode+80 for break code */
/* Azerty keys, Querty keys are in ()                   */
:FF  /* offset + 0x00  not used */
:FF  /* offset + 0x01  not used */
:FF  /* offset + 0x02  not used */
:FF  /* offset + 0x03  not used */
:FF  /* offset + 0x04  not used */
:FF  /* offset + 0x05  not used */
:FF  /* offset + 0x06  not used */
:FF  /* offset + 0x07 F1 */
:FF  /* offset + 0x08 ESC */
:FF  /* offset + 0x09  not used */
:FF  /* offset + 0x0A  not used */
:FF  /* offset + 0x0B  not used */
:FF  /* offset + 0x0C  not used */
:FF  /* offset + 0x0D TABULATION */
:FF  /* offset + 0x0E <2> (`) ( at left key 1 ) */
:FF  /* offset + 0x0F F2 */
:FF  /* offset + 0x10  not used */
:00  /* offset + 0x11 LEFT CTRL (Atari has just CTRL) */
:00  /* offset + 0x12 LEFT SHIFT */
:2B  /* offset + 0x13 >< */
:FF  /* offset + 0x14 CAPS */
:1A  /* offset + 0x15 A (Q) (deutsch Klammeraffe auf AltGR-Q) */
[...]
!end_verbatim

You can see than there are differences of the scancode returned with the 
normal Unshift/Shift state of 'Q' and the AltGr state of 'Q' who is 'ž'.  
A value of :00 means than the Shift state is the same value than the 
Unshift state. A value of :FF is a little bit special beacause no scancode 
is returned. 

(!B)
Modifier Table
(!b)

!begin_verbatim
/* German modifier table stored in Flash (program memory)                  */
/* This table can change host SHIFT & ALT states for each scancode, values */
/* are in hexa : bit 7: 1 for a valid entry                                */
/*               bit 6: 1 for force CTRL                                   */
/*               bit 5: ALT, bit 4: SHIFT states for the AltGR table       */
/*               bit 3: ALT, bit 2: SHIFT states for the Shift table       */
/*               bit 1: ALT, bit 0: SHIFT states for the Unshift table     */  
/* Azerty keys, Querty keys are in ()                                      */
:00  /* offset + 0x00  not used */
:00  /* offset + 0x01  not used */
:00  /* offset + 0x02  not used */
:00  /* offset + 0x03  not used */
:00  /* offset + 0x04  not used */
:00  /* offset + 0x05  not used */
:00  /* offset + 0x06  not used */
:00  /* offset + 0x07 F1 */
:00  /* offset + 0x08 ESC */
:00  /* offset + 0x09  not used */
:00  /* offset + 0x0A  not used */
:00  /* offset + 0x0B  not used */
:00  /* offset + 0x0C  not used */
:00  /* offset + 0x0D TABULATION */
:91  /* offset + 0x0E <2> (`) ( at left key 1, Deutsch ^) */
:00  /* offset + 0x0F F2 */
:00  /* offset + 0x10  not used */
:00  /* offset + 0x11 LEFT CTRL (Atari has just CTRL) */
:00  /* offset + 0x12 LEFT SHIFT */
:94  /* offset + 0x13 >< (deutsch | auf AltGR-<) */
:00  /* offset + 0x14 CAPS */
:A4  /* offset + 0x15 A (Q) (deutsch Klammeraffe auf AltGR-Q) */
[...]
!end_verbatim

When there are difference between PS/2 Unshift/Shift/AltGr states, you 
must indicate the host state of CTRL/ALT/SHIFT than you need for this 
scancodes. You can see an example with the 'Q' key where the :A4 value 
means:

!begin_verbatim
 bit 7 set for a valid entry.
 bit 6 cleared because CTRL isn't forced.
 bit 5 set because ALT is pressed for the AltGR table: 1A is send.
 bit 4 cleared because SHIFT isn't pressed for AltGR table: 1A is send.
 bit 3 cleared because ALT isn't pressed for Shift table: 10 is send.
 bit 2 set because SHIFT is pressed for the Shift table: 10 is send.  
 bit 1 cleared because ALT isn't pressed for Unshift table: 10 is send.
 bit 0 cleared because SHIFT isn't pressed for Unshift table: 10 is send.  
!end_verbatim

So the Shift and AltGr keys pressed not mean SHIFT and ALT host state keys 
pressed.

Inside the tables with the scancode + 0x80, a status frame is send
!begin_verbatim
with 0xF6 0x05 0x00 0x00 0x00 0x00 0x00 scancode
  or 0xF6 0x05 0x00 0x00 0x00 0x00 0x00 scancode+0x80 for the break code.
!end_verbatim

It is preferable to use the status frames with EIFFELCF.APP or edit the 
.inf files for replace the scancodes 0x54 to 0x5D because this codes was 
already affected by Atari for the functions keys F11 to F20 (SHIFT F1 to 
SHIFT F10).

For more informations, read the parts 'Atari Keyboard' and also for the 
index used, the 'AT scancodes set 3 (PS/2).


!node Auto folder program E_TEMP.PRG

You need to install E_TEMP.PRG inside the AUTO folder.

The main task of this short program is to install 2 cookies 'Eiff' and 
'Temp' for get special codes from Eiffel.

!begin_itemize
!item For get the temperature, EIFFELCF.APP use this program and the 
cookie 'Temp'. If you have a CT60, you can see inside CT60CONF.CPX the 
temperature curve of the last hour inside the CPU temperature page.
!item For use all features of the LCD Display, the program install a 
serial buffer who send data to the IKBD. The serial buffer reduce CPU 
load, because all characters are send by interrupts.
!item The multimedia scancodes keys are returned by Eiffel inside the 
cookie 'Eiff'. For example Aniplayer 2.23 use the cookie 'Eiff' for the 
PLAY/PAUSE, STOP, PREVIOUS TRACK, NEXT TRACK, VOLUME DOWN and VOLUME UP 
keys. If you have a CT60 CT60CONF.CPX and CT60TEMP.ACC/APP 1.03a can send 
a shutdown sequence with the POWER key. On a Falcon E_TEMP himself change 
the sound output with the keys MUTE, VOLUME DOWN and VOLUME UP.
!item The program send the RTC clock to the IKBD clock.
!end_itemize

The 'Eiff' cookie today has a pointer on a short integer value, this value 
contains the scancode byte of the IKBD status frame :
!begin_verbatim
     0xF6 0x05 0x00 0x00 0x00 0x00 0x00 scancode
  or 0xF6 0x05 0x00 0x00 0x00 0x00 0x00 scancode+0x80 for the break code.
!end_verbatim
A program who use a value, must write this value to 0 in the 2nd time.

The 'Temp' cookie today has a pointer on a 6 bytes :
!begin_verbatim
 byte 0  TEMP      temperature value in deg Celcius
 byte 1  AN0 PIC   analog input
 byte 2  motor 0/1 fan command
 byte 3  LOW       low level programmed
 byte 4  HIGH      high level programmed
 byte 5  RCTN      CTN value calculed in ohms/100
!end_verbatim


!node LCD Display

!image lcd.img

Since Eiffel 1.0.9, you can add an LCD 2x16.
On the LCD display, the temperature is updated at each second, like the 
IKBD clock. At the right of the temperature '+' (start) or  '-' (stop) is 
an image of the fans command. It's also possible to send a user message of 
8 characters, this is an example in C:

!begin_verbatim
#include <tos.h>

main()
{
    char load[4] = {0x20,0x01,0x20,8};
    char message[8] = " FALCON ";
    char spaces[8]  = "        ";

    Ikbdws(3,load);
    Ikbdws(7,message);
    Cconin();
    Ikbdws(3,load);
    Ikbdws(7,spaces);
    return(0);
}
!end_verbatim

Since Eiffel 1.10, the Atari computer can use all LCD screen, with a new 
IKBD command added (look at 'Eiffel IKBD Commands' or 'LCD' if you want 
more informations for programming).

lcd.slb is a library for use all the LCD sreen from the Atari.
This library is for example used by Aniplayer 2.23.

!image anip_lcd.img

You need to install E_TEMP.PRG inside the AUTO folder for get the 
temperature and install a serial buffer who send data to the IKBD.
The serial buffer reduce CPU load, because all characters are send
by interrupts. The TOS, MagiC or MiNT Bconout() Bios call wait a 
transmitter ready after each character ! E_TEMP.PRG not change 
the original Ikbdws() Xbios call.


!node Schematic

!image schema.img

(!B)
List of components
(!b)

!begin_verbatim
1 x PIC16F876-04/SP.
1 x 74LS174.
1 x LCD display 2x16 (command compatible HD44780).
1 x Quartz 4MHz.
1 x MOSFET channel N, IRF210, IRF510, IRF830, etc...
1 x green LED.
1 x yellow LED.
1 x 1N914 or 1N4148.
2 x 15pF.
2 x 0.1uF.
2 x 470ohms.
1 x 1Kohms.
2 x SIL10-5 470ohms.
2 x SIL10-9 10Kohms.
1 x 10Kohms adjustable.
1 x CTN 10Kohms at 25øC.
2 x male SUBD 9 pins.
1 x connector HE14 1x4.
2 x female MiniDin PS/2.
!end_verbatim

(!B)
Joysticks 0/1 pins
(!b)
!begin_verbatim
1 UP
2 DOWN
3 LEFT
4 RIGHT
5 FIRE
!end_verbatim

(!B)
Notes
(!b)

!image atx.img

If you want to 'save' the IKBD clock and you have an ATX power supply 
needed for example by the CT60, please connect +5V VCC of Eiffel to VCC 
Standby (violet, pin 12) and not to the motherboard keyboard connector. 


!node Atari Keyboard

!vinclude AtariKeyboard.txt


!node Eiffel IKBD Commands

!subnode GETTEMP

(!B)
!begin_verbatim
    0x03
    Returns:
         0xF6      status report
         0x03      code temperature
         TEMP      temperature value in deg Celcius
         AN0 PIC   analog input
         motor 0/1 fan command
         LOW       low level programmed
         HIGH      high level programmed
         RCTN      CTN value calculed in ohms/100
!end_verbatim
(!b)
    
Get temperature from sensor (since Eiffel 1.0.4).


!subnode PROGTEMP

(!B)
!begin_verbatim
    0x04
    index
    value
!end_verbatim
(!b)
    
Program temperature (since Eiffel 1.0.4).

!begin_verbatim
Index values are:
LEVELHTEMP 0x00 high level temperature in deg Celcius.
LEVELLTEMP 0x01 low  level temperature in deg Celcius.
TAB_CTN    0x02 (since Eiffel 1.0.6) 2*12 values (Rctn/100, temperature).
!end_verbatim


!subnode PROGKB

(!B)
!begin_verbatim
    0x05
    index
    code
!end_verbatim
(!b)

Program a keyboard's scancode (since Eiffel 1.0.4). The values are stored 
inside the EEPROM table (the original Eiffel table).
 
!begin_verbatim
Code is the PS/2 scancode which MUST BE between [ 0x00, 0x8F ].
If index is 0xFF, code is set 2 or 3.
!end_verbatim

 
!subnode PROGMS

(!B)
!begin_verbatim
    0x06
    index
    code
!end_verbatim
(!b)
    
Program a mouse's scancode (since Eiffel 1.0.4).

!begin_verbatim
Index values are:
 WHEELUP      0x00
 WHEELDOWN    0x01
 WHEELLEFT    0x02
 WHEELRIGHT   0x03
 BUTTON3      0x04
 ADR_BUTTON4  0x05
 ADR_BUTTON5  0x06						
 ADR_WHREPEAT 0x07 Number of lines to scroll, default is 3.
Data is the scancode to map or the number to repeat the scancode 
associated to the both wheel. 
!end_verbatim


!subnode MEMORY_LOAD

(!B)
!begin_verbatim
    0x20   
    ADRMSB address in controller
    ADRLSB memory to be loaded
    NUM    number of bytes (0-128)
    { data }
!end_verbatim
(!b)

This command is a bit special for Eiffel (since Eiffel 1.0.4).

!begin_verbatim
ADR 0x0000 to 0x01FF: RAM.
ADR 0x0000 and NUM 0x00: FLASH Firmware loading 0x2000 bytes
                         and a byte for checksum. 
!end_verbatim


!subnode LCD

(!B)
!begin_verbatim
    0x23
    len
    data(s)
!end_verbatim
(!b)
    
Send a command or data(s) to the LCD (since Eiffel 1.10).

!begin_verbatim
Len to 0x00: Data is a command, lock the LCD (RS=0).
Len to 0xFF: Unlock the LCD for Eiffel.
Len to 0x01-0xFE: send data(s) (RS=1).
!end_verbatim

This is an example in C who not use all LCD sceen but just the 8 users 
caracters:

!begin_verbatim
#include <tos.h>
#include <ext.h>

main()
{
    char init[] = {
     0x23,0x00,0x40,0x23,0x40, /* Lock LCD and set CGRAM adress to 0 */
     0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F, /* character pattern 1 */
     0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x1F, /* character pattern 2 */
     0x00,0x00,0x00,0x00,0x00,0x1F,0x1F,0x1F, /* character pattern 3 */
     0x00,0x00,0x00,0x00,0x1F,0x1F,0x1F,0x1F, /* character pattern 4 */
     0x00,0x00,0x00,0x1F,0x1F,0x1F,0x1F,0x1F, /* character pattern 5 */
     0x00,0x00,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F, /* character pattern 6 */
     0x00,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F, /* character pattern 7 */
     0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F, /* character pattern 8 */
     0x23,0xFF,0xFF};                         /* Unlock LCD */
                             
    char send[12] = {0x20,0x01,0x20,8,
     0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08}; /* LCD buffer 0x120 */
    char load[4]  = {0x20,0x01,0x20,8};        /* 8 bytes */
    char spaces[8]  = "        ";
    int i;
    
    Ikbdws(71,init);
    while(Cconis()==0)
    {    
        for(i=0;i<8;send[4+i]=Random()&7,i++);
        Ikbdws(11,send);
        delay(100);
    }
    Ikbdws(3,load);
    Ikbdws(7,spaces);
    return(0);
}
!end_verbatim

!image example2.img

Until you unlock Eiffel you can use all space of the LCD screen, because 
Temperature, Time, and User displays are locked. So like the lcd.slb 
library who use all space of the LCD screen and not the User buffer (8 
bytes), it's possible to use LCD command for set the DD RAM address 
(Data Display RAM address for set the cursor X,Y), set the CG RAM address 
(Character Generator RAM address for change one of eight programmables 
characters 0 to 7), clear the screen, etc...

Here this is the list of this commands (HD44780 compatible):
         
!image commands.img

But the best way is to use the list of functions of the library lcd.slb 
who prepare commands send to the LCD via Eiffel:

!begin_verbatim
void LCD_DefineChar(short address, unsigned char *pattern); 
void LCD_DisplayOff(void);
void LCD_DisplayOn(void);
void LCD_Clear(void);
void LCD_Home(void);
void LCD_Mode(short mode);
void LCD_Cursor(short row, short column);
void LCD_CursorLeft(void);
void LCD_CursorRight(void);
void LCD_CursorOn(void);
void LCD_CursorOff(void);
void LCD_ShiftLeft(void);
void LCD_ShiftRight(void);
void LCD_DisplayCharacter(short a_char);
void LCD_DisplayString(short row, short column, char *string);
void LCD_DisplayStringCentered(short row, char *string);
void LCD_DisplayScreen(char *ptr);
void LCD_DisplayRow(short row, char *string);
void LCD_WipeOnLR(char *ptr);
void LCD_WipeOnRL(char *ptr);
void LCD_WipeOffLR(void);
void LCD_WipeOffRL(void);
!end_verbatim

There are a demo.c for example who call this library.


!node AT scancodes set 3 (PS/2)

!vinclude ATscancodes3.txt


!node History

There are backward compatibility between Eiffel 1,2,3 and the latest 
Firmware.

(!B)
v1.10 2004/11/27
(!b)

!begin_itemize
!item Add IKBD_LCD command.
!item The Eiffel clock can work by interrupts but this feature need to 
reprogram the PIC (eiffel_i.hex, v1.10i). So it's also possible to use the 
version without interrupts (eiffel.hex).
!item New boot loader with LCD display.
!item Fix AltGr or Shift state if the AltGr/Shift(s) keys are released 
before the key.
!end_itemize

(!B)
v1.0.9 2004/10/23 (Eiffel 3)
(!b)

!begin_itemize
!item Fix IKBD clock, crash at 0H00 and initialization during power-up.
!item IKBD Power-up code is send.
!item Add LCD display HD44780 compatible on the debug pins RB4 (Data) and 
RB5 (Clock). 
!end_itemize

(!B)
v1.0.8 2004/09/01
(!b)

!begin_itemize
!item The tables Shift and AltGr inside the flash (program memory) can be 
used with 50 main characters of the set 2:
 
 0x07 (F1), 0x0E, 0x0F (F2), 0x11, 0x12, 0x13 (><), 0x15 (AQ),
 0x16 (1), 0x17 (F3),  0x1E (2), 0x1F (F4), 0x24 (E), 0x25 (4),
 0x26 (3), 0x27 (F5), 0x2E (5), 0x2F (F6), 0x36 (6), 0x37 (F7), 
 0x39 (ALTGR), 0x3A (,M), 0x3D (7), 0x3E (8), 0x3F (F8), 0x41 (;,),
 0x45 (0), 0x46 (9), 0x47 (F9), 0x49 (:.), 0x4A (!/), 0x4C (M;),
 0x4E ()-), 0x4F (F10), 0x52 (—'), 0x53 (*\), 0x54 (^[), 0x55 (=),
 0x56 (F11), 0x57 (PRTSCR), 0x59, 0x5B ($]), 0x5E (F12), 0x5F (SCROLL),
 0x62 (PAUSE), 0x65 (END), 0x6D (PAGEDN), 0x6F (PAGEUP), 0x76 (VERRN),
 0x7F (SLEEP), 0x80 (POWER), 0x81 (WAKE), 0x8B (WLEFT), 0x8C (WRIGHT),
 0x8E (WAPP).
 
 Eiffel can work without driver for the sets 2 and 3!
!item Inside the tables with the scancode + 0x80, a status frame is send
with 0xF6 0x05 0x00 0x00 0x00 0x00 0x00 scancode, or 0xF6 0x05 0x00 0x00 
0x00 0x00 0x00 scancode+0x80 for the break code. 
!item It is preferable to use the status frames with EIFFELCF.APP or edit 
the .inf files for replace the scancodes 0x54 to 0x5D because this codes 
was already affected by Atari for the functions keys F11 to F20 (SHIFT F1 
to SHIFT F10). 
!end_itemize

(!B)
v1.0.7 2004/08/24
(!b)

!begin_itemize
!item Eiffel can send different scancodes for the same key, there are 3 
tables Unshift (the normal Eiffel table stored inside the data EEPROM), 
Shift and AltGr stored inside the Flash program memory. User tables are in 
a .inf files and are loaded with EIFFELCF.APP. This new feature works only 
with the PS/2 set 3. But now it's possible to use Eiffel without driver!
!item By default Eiffel 1.0.7 is compatible with Eiffel 1.0.6.
!item Left Alt key fixed for the set 2, the value is unchanged if you 
modify the AltGR key with EIFFELCF.APP.
!end_itemize

(!B)
v1.0.6 2004/05/31
(!b)

!begin_itemize
!item EIFFELCF.APP updated for update the firmware.
!item Random problems after Reset normally fixed.
!item Better temperature, now there are 12 points of the CTN's curve.
!end_itemize

(!B)
v1.0.5 2004/02/03
(!b)

!begin_itemize
!item Support of AT set 2 scancodes.
!item Set 2 or 3 selection inside the GEM application EIFFELCF.APP.
!item Set 2 support POWER, SLEEP, and WAKE keys.
!item Set 2 support Billdoze Multimedia Scan-codes.
!end_itemize

(!B)
v1.0.4 2002/08/15 (Eiffel 2)
(!b)

!begin_itemize
!item Two Atari standard joysticks support DB-9.
!item Motor command for ventilator and temperature sensor.
!item Near all IKBD commands supported.
!item Updating eiffel capabilities from GEM application EIFFELCF.APP.
!end_itemize

(!B)
v1.0.3
(!b)

!begin_itemize
!item Mouse wheel up to 5 buttons and Mouse double wheels support.
!item Middle mouse button return now a scancode.
!item Flash Data PIC programming to change scancodes returned for Wheels 
and new buttons 3, 4 and 5. 
!item Support of second Flash Data programming to change some extra 
scancode returned for keyboard. 
!end_itemize


!node Authors

!vinclude authors.txt

!end_document
